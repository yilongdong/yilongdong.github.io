{"title":"clang 编译链接","uid":"58a6ef8684392e221fda2f90c80f6f4d","slug":"clang-编译链接","date":"2022-11-03T01:02:21.000Z","updated":"2022-11-03T02:26:01.457Z","comments":true,"path":"api/articles/clang-编译链接.json","keywords":null,"cover":null,"content":"<p>clang编译与搜索路径</p>\n<span id=\"more\"></span>\n<!-- markdownlint-disable MD041 MD002-->\n\n<p>如果在mac上自己编译了clang,llvm然后安装了，可能会出现找不到文件的错误。</p>\n<p>可以在<code>~/.zshrc</code>中加入</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">alias</span> clang+<span class=\"token operator\">+=</span><span class=\"token string\">'clang++ -isysroot `xcrun --show-sdk-path` '</span>\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">clang</span><span class=\"token operator\">=</span><span class=\"token string\">'clang -isysroot `xcrun --show-sdk-path` '</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">xx.c <span class=\"token comment\"># 源文件</span>\nxx.i <span class=\"token comment\"># 预处理后文件</span>\nxx.s <span class=\"token comment\"># 汇编代码</span>\nxx.o <span class=\"token comment\"># 目标文件，引用的其他文件的函数地址尚未定义</span>\nxx.out <span class=\"token comment\"># 可执行文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>编译预处理</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">clang <span class=\"token parameter variable\">-E</span> xx.c <span class=\"token comment\"># 进行预处理</span>\ncpp xx.c <span class=\"token comment\"># 编译预处理命令程序是cpp，也可以直接使用cpp进行预处理</span>\nclang <span class=\"token parameter variable\">-E</span> <span class=\"token parameter variable\">-c</span> xx.i xx.c <span class=\"token comment\"># 保存到文件</span>\nclang <span class=\"token parameter variable\">-o</span> xx.i xx.c <span class=\"token comment\"># 保存到文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>生成汇编</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">clang <span class=\"token parameter variable\">-S</span> xx.c\nclang <span class=\"token parameter variable\">-S</span> <span class=\"token parameter variable\">-o</span> xx.s xx.c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>生成.o文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">clang <span class=\"token parameter variable\">-c</span> xx.c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>保存中间步骤</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">clang -save-temps xx.c\n<span class=\"token comment\"># 会生成xx.i xx.s xx.o a.out</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"搜索路径设置\"><a href=\"#搜索路径设置\" class=\"headerlink\" title=\"搜索路径设置\"></a>搜索路径设置</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;xxx&gt;</span> <span class=\"token comment\">// 只在默认的系统包含路径搜索头文件</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"xxx\"</span> <span class=\"token comment\">// 现在当前目录搜索头文件</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">clang <span class=\"token parameter variable\">-Ixxx</span> <span class=\"token comment\"># 增加头文件搜索目录</span>\nclang <span class=\"token parameter variable\">-include</span> /xxx/xx.h <span class=\"token comment\"># 增加头文件</span>\nclang <span class=\"token parameter variable\">-Lxxx</span> <span class=\"token comment\"># 增加库搜索目录</span>\nclang <span class=\"token parameter variable\">-lxx</span> <span class=\"token comment\"># 增加库文件  libxx.后缀</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"常用编译选项\"><a href=\"#常用编译选项\" class=\"headerlink\" title=\"常用编译选项\"></a>常用编译选项</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token parameter variable\">-Wall</span> <span class=\"token builtin class-name\">:</span> 显示所有常用的编译警告信息。\n<span class=\"token parameter variable\">-W</span> <span class=\"token builtin class-name\">:</span> 显示更多的常用编译警告，如：变量未使用、一些逻辑错误。\n<span class=\"token parameter variable\">-Werror</span> <span class=\"token builtin class-name\">:</span> 将警告升级为错误\n<span class=\"token parameter variable\">-fPIC</span> <span class=\"token builtin class-name\">:</span> 共享库应创建位置无关代码\n<span class=\"token parameter variable\">-v</span> <span class=\"token builtin class-name\">:</span> 打印编译一个文件的所有步骤\n<span class=\"token parameter variable\">-D</span> <span class=\"token builtin class-name\">:</span> -D<span class=\"token operator\">&lt;</span>macroname<span class=\"token operator\">&gt;=</span><span class=\"token operator\">&lt;</span>value<span class=\"token operator\">&gt;</span> 定义宏\n<span class=\"token parameter variable\">-U</span> <span class=\"token builtin class-name\">:</span> undef\n@xx <span class=\"token builtin class-name\">:</span> 从文件xx中读取参数\n<span class=\"token parameter variable\">-std</span> <span class=\"token builtin class-name\">:</span> <span class=\"token parameter variable\">-std</span><span class=\"token operator\">=</span>c++11/c++14/c++17/c90/c89/\n<span class=\"token parameter variable\">-static</span> <span class=\"token parameter variable\">-shared</span>\n-ccc-print-phases <span class=\"token builtin class-name\">:</span> 打印编译阶段\n-L<span class=\"token variable\"><span class=\"token variable\">$(</span>brew <span class=\"token parameter variable\">--prefix</span> gperftools<span class=\"token variable\">)</span></span>/lib<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html\">其他参数</a></p>\n","text":"clang编译与搜索路径 如果在mac上自己编译了clang,llvm然后安装了，可能会出现找不到文件的错误。 可以在~/.zshrc中加入 alias clang++='clang++ -isysroot `xcrun --show-sdk-path` ' alias clan...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"笔记","slug":"笔记","count":18,"path":"api/categories/笔记.json"}],"tags":[{"name":"clang","slug":"clang","count":1,"path":"api/tags/clang.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%90%9C%E7%B4%A2%E8%B7%AF%E5%BE%84%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">搜索路径设置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9\"><span class=\"toc-text\">常用编译选项</span></a></li></ol>","author":{"name":"YiLongDong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"git worktree使用","uid":"7a6e3dad18aab366d395a680cdf73288","slug":"git-worktree使用","date":"2022-11-03T08:24:51.000Z","updated":"2022-11-03T14:25:46.351Z","comments":true,"path":"api/articles/git-worktree使用.json","keywords":null,"cover":[],"text":"使用git worktree同时在多个 branch 上工作。 参考一些文章 git worktree add [-f] [--detach] [--checkout] [--lock [--reason &lt;string&gt;]] [-b &lt;new-branch&g...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"笔记","slug":"笔记","count":18,"path":"api/categories/笔记.json"}],"tags":[{"name":"git","slug":"git","count":3,"path":"api/tags/git.json"}],"author":{"name":"YiLongDong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"CMake Cookbook 第二章: 检测环境","uid":"436815cb6db7489e3a0d980760c16cd5","slug":"CMake-Cookbook-第二章-检测环境","date":"2022-10-31T14:29:40.000Z","updated":"2022-10-31T14:53:40.028Z","comments":true,"path":"api/articles/CMake-Cookbook-第二章-检测环境.json","keywords":null,"cover":null,"text":"CMake Cookbook 第二章: 检测环境 本文是对 cmake cookbook中文翻译的学习笔记记录，建议看原文。 检测操作系统环境if(CMAKE_SYSTEM_NAME STREQUAL \"Linux\") message(STATUS \"Configuring on...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"笔记","slug":"笔记","count":18,"path":"api/categories/笔记.json"}],"tags":[{"name":"CMake","slug":"CMake","count":2,"path":"api/tags/CMake.json"}],"author":{"name":"YiLongDong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}