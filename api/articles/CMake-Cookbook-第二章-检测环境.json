{"title":"CMake Cookbook 第二章: 检测环境","uid":"436815cb6db7489e3a0d980760c16cd5","slug":"CMake-Cookbook-第二章-检测环境","date":"2022-10-31T14:29:40.000Z","updated":"2022-10-31T14:53:40.028Z","comments":true,"path":"api/articles/CMake-Cookbook-第二章-检测环境.json","keywords":null,"cover":null,"content":"<h1 id=\"CMake-Cookbook-第二章-检测环境\"><a href=\"#CMake-Cookbook-第二章-检测环境\" class=\"headerlink\" title=\"CMake Cookbook 第二章: 检测环境\"></a>CMake Cookbook 第二章: 检测环境</h1><span id=\"more\"></span>\n<!-- markdownlint-disable MD041 MD002-->\n\n<p>本文是对 <a href=\"https://github.com/xiaoweiChen/CMake-Cookbook/blob/master/SUMMARY.md\">cmake cookbook中文翻译</a>的学习笔记记录，建议看原文。</p>\n<h2 id=\"检测操作系统环境\"><a href=\"#检测操作系统环境\" class=\"headerlink\" title=\"检测操作系统环境\"></a>检测操作系统环境</h2><pre class=\"line-numbers language-cmake\" data-language=\"cmake\"><code class=\"language-cmake\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_SYSTEM_NAME</span> <span class=\"token operator\">STREQUAL</span> <span class=\"token string\">\"Linux\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">message</span><span class=\"token punctuation\">(</span>STATUS <span class=\"token string\">\"Configuring on/for Linux\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elseif</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_SYSTEM_NAME</span> <span class=\"token operator\">STREQUAL</span> <span class=\"token string\">\"Darwin\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">message</span><span class=\"token punctuation\">(</span>STATUS <span class=\"token string\">\"Configuring on/for macOS\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elseif</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_SYSTEM_NAME</span> <span class=\"token operator\">STREQUAL</span> <span class=\"token string\">\"Windows\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">message</span><span class=\"token punctuation\">(</span>STATUS <span class=\"token string\">\"Configuring on/for Windows\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elseif</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_SYSTEM_NAME</span> <span class=\"token operator\">STREQUAL</span> <span class=\"token string\">\"AIX\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">message</span><span class=\"token punctuation\">(</span>STATUS <span class=\"token string\">\"Configuring on/for IBM AIX\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">message</span><span class=\"token punctuation\">(</span>STATUS <span class=\"token string\">\"Configuring on/for <span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token variable\">CMAKE_SYSTEM_NAME</span><span class=\"token punctuation\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">endif</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h2 id=\"处理平台和编译器相关代码\"><a href=\"#处理平台和编译器相关代码\" class=\"headerlink\" title=\"处理平台和编译器相关代码\"></a>处理平台和编译器相关代码</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n\nstd<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">say_hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">IS_WINDOWS</span></span>\n  <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello from Windows!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\">IS_LINUX</span></span>\n  <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello from Linux!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\">IS_MACOS</span></span>\n  <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello from macOS!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n  <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello from an unknown system!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n  \n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">IS_INTEL_CXX_COMPILER</span></span>\n  <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Intel compiler!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\">IS_GNU_CXX_COMPILER</span></span>\n  <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello GNU compiler!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\">IS_PGI_CXX_COMPILER</span></span>\n  <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello PGI compiler!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\">IS_XL_CXX_COMPILER</span></span>\n  <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello XL compiler!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n  <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello unknown compiler - have we met before?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">say_hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"compiler name is \"</span> COMPILER_NAME <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> EXIT_SUCCESS<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-cmake\" data-language=\"cmake\"><code class=\"language-cmake\"><span class=\"token keyword\">cmake_minimum_required</span><span class=\"token punctuation\">(</span><span class=\"token property\">VERSION</span> <span class=\"token number\">3.5</span> FATAL_ERROR<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">project</span><span class=\"token punctuation\">(</span>recipe-<span class=\"token number\">02</span> LANGUAGES CXX<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>hello-world hello-world.cpp<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 处理平台相关代码</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_SYSTEM_NAME</span> <span class=\"token operator\">STREQUAL</span> <span class=\"token string\">\"Linux\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">target_compile_definitions</span><span class=\"token punctuation\">(</span>hello-world <span class=\"token namespace\">PUBLIC</span> <span class=\"token string\">\"IS_LINUX\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">endif</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_SYSTEM_NAME</span> <span class=\"token operator\">STREQUAL</span> <span class=\"token string\">\"Darwin\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">target_compile_definitions</span><span class=\"token punctuation\">(</span>hello-world <span class=\"token namespace\">PUBLIC</span> <span class=\"token string\">\"IS_MACOS\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">endif</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_SYSTEM_NAME</span> <span class=\"token operator\">STREQUAL</span> <span class=\"token string\">\"Windows\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">target_compile_definitions</span><span class=\"token punctuation\">(</span>hello-world <span class=\"token namespace\">PUBLIC</span> <span class=\"token string\">\"IS_WINDOWS\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">endif</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 处理编译器相关代码</span>\n<span class=\"token keyword\">target_compile_definitions</span><span class=\"token punctuation\">(</span>hello-world <span class=\"token namespace\">PUBLIC</span> <span class=\"token string\">\"COMPILER_NAME=\\\"<span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token variable\">CMAKE_CXX_COMPILER_ID</span><span class=\"token punctuation\">}</span></span>\\\"\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_COMPILER_ID</span> <span class=\"token operator\">MATCHES</span> Intel<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">target_compile_definitions</span><span class=\"token punctuation\">(</span>hello-world <span class=\"token namespace\">PUBLIC</span> <span class=\"token string\">\"IS_INTEL_CXX_COMPILER\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">endif</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_COMPILER_ID</span> <span class=\"token operator\">MATCHES</span> GNU<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">target_compile_definitions</span><span class=\"token punctuation\">(</span>hello-world <span class=\"token namespace\">PUBLIC</span> <span class=\"token string\">\"IS_GNU_CXX_COMPILER\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">endif</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_COMPILER_ID</span> <span class=\"token operator\">MATCHES</span> PGI<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">target_compile_definitions</span><span class=\"token punctuation\">(</span>hello-world <span class=\"token namespace\">PUBLIC</span> <span class=\"token string\">\"IS_PGI_CXX_COMPILER\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">endif</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_COMPILER_ID</span> <span class=\"token operator\">MATCHES</span> XL<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">target_compile_definitions</span><span class=\"token punctuation\">(</span>hello-world <span class=\"token namespace\">PUBLIC</span> <span class=\"token string\">\"IS_XL_CXX_COMPILER\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">endif</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"检测处理器体系结构与指令集\"><a href=\"#检测处理器体系结构与指令集\" class=\"headerlink\" title=\"检测处理器体系结构与指令集\"></a>检测处理器体系结构与指令集</h2><p>暂时用不到</p>\n<p><a href=\"https://github.com/xiaoweiChen/CMake-Cookbook/blob/master/content/chapter2/2.4-chinese.md\">需要可以点击查看</a></p>\n<h2 id=\"为Eigen库使能向量化\"><a href=\"#为Eigen库使能向量化\" class=\"headerlink\" title=\"为Eigen库使能向量化\"></a>为Eigen库使能向量化</h2><p>暂时用不到</p>\n<p><a href=\"https://github.com/xiaoweiChen/CMake-Cookbook/blob/master/content/chapter2/2.6-chinese.md\">需要可以点击查看</a></p>\n","text":"CMake Cookbook 第二章: 检测环境 本文是对 cmake cookbook中文翻译的学习笔记记录，建议看原文。 检测操作系统环境if(CMAKE_SYSTEM_NAME STREQUAL \"Linux\") message(STATUS \"Configuring on...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"笔记","slug":"笔记","count":18,"path":"api/categories/笔记.json"}],"tags":[{"name":"CMake","slug":"CMake","count":2,"path":"api/tags/CMake.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#CMake-Cookbook-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%A3%80%E6%B5%8B%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">CMake Cookbook 第二章: 检测环境</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A3%80%E6%B5%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">检测操作系统环境</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%84%E7%90%86%E5%B9%B3%E5%8F%B0%E5%92%8C%E7%BC%96%E8%AF%91%E5%99%A8%E7%9B%B8%E5%85%B3%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">处理平台和编译器相关代码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A3%80%E6%B5%8B%E5%A4%84%E7%90%86%E5%99%A8%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E6%8C%87%E4%BB%A4%E9%9B%86\"><span class=\"toc-text\">检测处理器体系结构与指令集</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BAEigen%E5%BA%93%E4%BD%BF%E8%83%BD%E5%90%91%E9%87%8F%E5%8C%96\"><span class=\"toc-text\">为Eigen库使能向量化</span></a></li></ol></li></ol>","author":{"name":"YiLongDong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"clang 编译链接","uid":"58a6ef8684392e221fda2f90c80f6f4d","slug":"clang-编译链接","date":"2022-11-03T01:02:21.000Z","updated":"2022-11-03T02:26:01.457Z","comments":true,"path":"api/articles/clang-编译链接.json","keywords":null,"cover":null,"text":"clang编译与搜索路径 如果在mac上自己编译了clang,llvm然后安装了，可能会出现找不到文件的错误。 可以在~/.zshrc中加入 alias clang++='clang++ -isysroot `xcrun --show-sdk-path` ' alias clan...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"笔记","slug":"笔记","count":18,"path":"api/categories/笔记.json"}],"tags":[{"name":"clang","slug":"clang","count":1,"path":"api/tags/clang.json"}],"author":{"name":"YiLongDong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"CMake Cookbook 第一章：从可执行文件到库","uid":"a98e3c9f33f729f12ec0aac8a3ccd800","slug":"CMake-Cookbook-第一章-从可执行文件到库","date":"2022-10-31T13:15:36.000Z","updated":"2022-11-07T07:37:50.157Z","comments":true,"path":"api/articles/CMake-Cookbook-第一章-从可执行文件到库.json","keywords":null,"cover":null,"text":"CMake Cookbook 第一章：从可执行文件到库 本文是对 cmake cookbook中文翻译的学习笔记记录，建议看原文。 CMake是一个构建系统生成器。将描述构建系统(如：Unix Makefile、Ninja、Visual Studio等)应当如何操作才能编译代码。...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"笔记","slug":"笔记","count":18,"path":"api/categories/笔记.json"}],"tags":[{"name":"CMake","slug":"CMake","count":2,"path":"api/tags/CMake.json"}],"author":{"name":"YiLongDong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}