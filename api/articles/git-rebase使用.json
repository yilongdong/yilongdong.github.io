{"title":"git rebase使用","uid":"4ba2934548c823e4c39b3ff3e4179b40","slug":"git-rebase使用","date":"2022-11-03T14:10:26.000Z","updated":"2022-11-03T14:25:50.659Z","comments":true,"path":"api/articles/git-rebase使用.json","keywords":null,"cover":[],"content":"<p><code>git rebase</code>法则：永远不要在公共分支上使用它。</p>\n<span id=\"more\"></span>\n<!-- markdownlint-disable MD041 MD002-->\n\n\n\n<h2 id=\"合并主干提交到feature\"><a href=\"#合并主干提交到feature\" class=\"headerlink\" title=\"合并主干提交到feature\"></a>合并主干提交到feature</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout feature\n<span class=\"token function\">git</span> merge master\n<span class=\"token comment\"># git merge feature master</span>\n<span class=\"token comment\"># 这样会在feature创建一个merge commit</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/02.svg\" alt=\"将master合并到功能分支中\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout feature\n<span class=\"token function\">git</span> rebase master\n<span class=\"token comment\"># git rebase -i master</span>\n<span class=\"token comment\"># 与merge提交不同，rebase通过为原始分支中每个提交创建全新的commits来重写项目历史记录</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/03.svg\" alt=\"将功能分支重新映射到主服务器上\"></p>\n<p>要使用交互式 rebase，需要使用 <code>git rebase</code> 和 <code>-i</code> 选项：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">git checkout feature\ngit rebase -i master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这将打开一个文本编辑器，列出即将移动的所有提交：</p>\n<pre class=\"line-numbers language-cmake\" data-language=\"cmake\"><code class=\"language-cmake\">pick 33d5b7a Message for commit <span class=\"token comment\">#1</span>\npick 9480b3d Message for commit <span class=\"token comment\">#2</span>\npick 5c67e61 Message for commit <span class=\"token comment\">#3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>此列表准确定义了执行 rebase 后分支的外观。通过更改 <code>pick</code> 命令或重新排序条目，你可以使分支的历史记录看起来像你想要的任何内容。例如，如果第二次提交 fix 了第一次提交中的一个小问题，您可以使用以下 <code>fixup</code> 命令将它们浓缩为一个提交：</p>\n<pre class=\"line-numbers language-cmake\" data-language=\"cmake\"><code class=\"language-cmake\">pick 33d5b7a Message for commit <span class=\"token comment\">#1</span>\nfixup 9480b3d Message for commit <span class=\"token comment\">#2</span>\npick 5c67e61 Message for commit <span class=\"token comment\">#3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/04.svg\" alt=\"使用交互式rebase来压缩提交\"></p>\n<h2 id=\"本地清理\"><a href=\"#本地清理\" class=\"headerlink\" title=\"本地清理\"></a>本地清理</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout feature\n<span class=\"token function\">git</span> rebase <span class=\"token parameter variable\">-i</span> HEAD~3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/07.svg\" alt=\"重新上头~3\"></p>\n<p>如果要使用此方法重写整个功能，<code>git merge-base</code> 命令可用于查找 <code>feature</code> 分支的原始 base。以下内容返回原始 base 的提交ID，然后你可以将其传递给 <code>git rebase</code>：</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">git merge<span class=\"token operator\">-</span><span class=\"token keyword\">base</span> feature master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n","text":"git rebase法则：永远不要在公共分支上使用它。 合并主干提交到featuregit checkout feature git merge master # git merge feature master # 这样会在feature创建一个merge commit git...","link":"","photos":[],"count_time":{"symbolsCount":887,"symbolsTime":"1 mins."},"categories":[{"name":"笔记","slug":"笔记","count":18,"path":"api/categories/笔记.json"}],"tags":[{"name":"git","slug":"git","count":3,"path":"api/tags/git.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%88%E5%B9%B6%E4%B8%BB%E5%B9%B2%E6%8F%90%E4%BA%A4%E5%88%B0feature\"><span class=\"toc-text\">合并主干提交到feature</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E5%9C%B0%E6%B8%85%E7%90%86\"><span class=\"toc-text\">本地清理</span></a></li></ol>","author":{"name":"YiLongDong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"音视频很好的链接","uid":"a428701588e00e4dd38a37db22dfe9f5","slug":"音视频很好的链接","date":"2022-11-05T15:41:47.000Z","updated":"2022-11-05T15:55:29.838Z","comments":true,"path":"api/articles/音视频很好的链接.json","keywords":null,"cover":null,"text":"点击阅读前文前, 首页能看到的文章的简短描述 http://jhuster.com 卢俊 https://blog.51cto.com/ticktick/1956269 音视频入坑指南 https://zhuanlan.zhihu.com/p/51371354 播放器架构 ","link":"","photos":[],"count_time":{"symbolsCount":140,"symbolsTime":"1 mins."},"categories":[{"name":"笔记","slug":"笔记","count":18,"path":"api/categories/笔记.json"}],"tags":[{"name":"OpenGL","slug":"OpenGL","count":5,"path":"api/tags/OpenGL.json"},{"name":"ffmpeg","slug":"ffmpeg","count":5,"path":"api/tags/ffmpeg.json"}],"author":{"name":"YiLongDong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"git commit规范","uid":"488532bb3413d4814952662362babd82","slug":"git-commit规范","date":"2022-11-03T13:12:55.000Z","updated":"2022-11-03T14:01:10.110Z","comments":true,"path":"api/articles/git-commit规范.json","keywords":null,"cover":[],"text":"点击阅读前文前, 首页能看到的文章的简短描述 http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html Commit message 都包括三个部分：Header，Body 和 Footer。 &l...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"笔记","slug":"笔记","count":18,"path":"api/categories/笔记.json"}],"tags":[{"name":"git","slug":"git","count":3,"path":"api/tags/git.json"}],"author":{"name":"YiLongDong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}