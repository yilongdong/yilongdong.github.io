<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git rebase使用</title>
      <link href="/2022/11/03/git-rebase-shi-yong/"/>
      <url>/2022/11/03/git-rebase-shi-yong/</url>
      
        <content type="html"><![CDATA[<p><code>git rebase</code>法则：永远不要在公共分支上使用它。</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h2 id="合并主干提交到feature"><a href="#合并主干提交到feature" class="headerlink" title="合并主干提交到feature"></a>合并主干提交到feature</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout feature<span class="token function">git</span> merge master<span class="token comment"># git merge feature master</span><span class="token comment"># 这样会在feature创建一个merge commit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/02.svg" alt="将master合并到功能分支中"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout feature<span class="token function">git</span> rebase master<span class="token comment"># git rebase -i master</span><span class="token comment"># 与merge提交不同，rebase通过为原始分支中每个提交创建全新的commits来重写项目历史记录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/03.svg" alt="将功能分支重新映射到主服务器上"></p><p>要使用交互式 rebase，需要使用 <code>git rebase</code> 和 <code>-i</code> 选项：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">git checkout featuregit rebase -i master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这将打开一个文本编辑器，列出即将移动的所有提交：</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake">pick 33d5b7a Message for commit <span class="token comment">#1</span>pick 9480b3d Message for commit <span class="token comment">#2</span>pick 5c67e61 Message for commit <span class="token comment">#3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此列表准确定义了执行 rebase 后分支的外观。通过更改 <code>pick</code> 命令或重新排序条目，你可以使分支的历史记录看起来像你想要的任何内容。例如，如果第二次提交 fix 了第一次提交中的一个小问题，您可以使用以下 <code>fixup</code> 命令将它们浓缩为一个提交：</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake">pick 33d5b7a Message for commit <span class="token comment">#1</span>fixup 9480b3d Message for commit <span class="token comment">#2</span>pick 5c67e61 Message for commit <span class="token comment">#3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/04.svg" alt="使用交互式rebase来压缩提交"></p><h2 id="本地清理"><a href="#本地清理" class="headerlink" title="本地清理"></a>本地清理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout feature<span class="token function">git</span> rebase <span class="token parameter variable">-i</span> HEAD~3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/07.svg" alt="重新上头~3"></p><p>如果要使用此方法重写整个功能，<code>git merge-base</code> 命令可用于查找 <code>feature</code> 分支的原始 base。以下内容返回原始 base 的提交ID，然后你可以将其传递给 <code>git rebase</code>：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">git merge<span class="token operator">-</span><span class="token keyword">base</span> feature master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git commit规范</title>
      <link href="/2022/11/03/git-commit-gui-fan/"/>
      <url>/2022/11/03/git-commit-gui-fan/</url>
      
        <content type="html"><![CDATA[<p>点击阅读前文前, 首页能看到的文章的简短描述</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><p><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html">http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html</a></p><p>Commit message 都包括三个部分：Header，Body 和 Footer。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>type<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>scope<span class="token operator">&gt;</span><span class="token punctuation">)</span>: <span class="token operator">&lt;</span>subject<span class="token operator">&gt;</span>// 空一行<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>// 空一行<span class="token operator">&lt;</span>footer<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>Header部分只有一行，包括三个字段：<code>type</code>（必需）、<code>scope</code>（可选）和<code>subject</code>（必需）。</p><p><strong>（1）type</strong></p><blockquote><p>feat：新功能（feature）<br>fix：修补bug<br>docs：文档（documentation）<br>style： 格式（不影响代码运行的变动）<br>refactor：重构（即不是新增功能，也不是修改bug的代码变动）<br>test：增加测试<br>chore：构建过程或辅助工具的变动</p></blockquote><p><strong>（2）scope</strong></p><p><code>scope</code>用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p><p><strong>（3）subject</strong></p><p><code>subject</code>是 commit 目的的简短描述，不超过50个字符。</p><blockquote><ul><li>以动词开头，使用第一人称现在时，比如<code>change</code>，而不是<code>changed</code>或<code>changes</code></li><li>第一个字母小写</li><li>结尾不加句号（<code>.</code>）</li></ul></blockquote><h2 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">More detailed explanatory text, <span class="token keyword">if</span> necessary.  Wrap it to about <span class="token number">72</span> characters or so. Further paragraphs come after blank lines.- Bullet points are okay, too- Use a hanging indent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h2><ol><li><p>关闭Issue</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 关闭单个</span>Closes <span class="token comment">#234 </span><span class="token comment"># 关闭多个</span>Closes <span class="token comment">#123, #245, #992</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不兼容变动</p></li></ol><p>感觉基本不用，用到看原文</p><h2 id="Revert"><a href="#Revert" class="headerlink" title="Revert"></a>Revert</h2><p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以<code>revert:</code>开头，后面跟着被撤销 Commit 的 Header。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">revert: feat<span class="token punctuation">(</span>pencil<span class="token punctuation">)</span>: <span class="token function">add</span> <span class="token string">'graphiteWidth'</span> optionThis reverts commit 667ecc1654a317a13331b17617d973392f415f02.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Body部分的格式是固定的，必须写成<code>This reverts commit &lt;hash&gt;.</code>，其中的<code>hash</code>是被撤销 commit 的 SHA 标识符。</p><p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的<code>Reverts</code>小标题下面。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="Commitizen"><a href="#Commitizen" class="headerlink" title="Commitizen"></a>Commitizen</h3><p><a href="https://github.com/commitizen/cz-cli">Commitizen</a>是一个撰写合格 Commit message 的工具。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装时遇到报错可以换淘宝源</span><span class="token comment"># npm config set registry https://registry.npm.taobao.org</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> commitizen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在项目路径下运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">commitizen init cz-conventional-changelog <span class="token parameter variable">--save</span> --save-exact<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以后，凡是用到<code>git commit</code>命令，一律改为使用<code>git cz</code>。</p><p>如果要编写多行，使用<code>\n</code> 换行。回车直接结束描述</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221103214049773.png" alt="image-20221103214049773"></p><h3 id="standard-changelog"><a href="#standard-changelog" class="headerlink" title="standard-changelog"></a>standard-changelog</h3><p>根据commit生成changelog</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> standard-changelog<span class="token builtin class-name">cd</span> project_dirstandard-changelog<span class="token comment"># npm install -g conventional-changelog</span><span class="token comment"># cd my-project</span><span class="token comment"># conventional-changelog -p angular -i CHANGELOG.md -w</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221103215039647.png" alt="image-20221103215039647"></p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221103215056593.png" alt="image-20221103215056593"></p><h2 id="修改git-commit信息"><a href="#修改git-commit信息" class="headerlink" title="修改git commit信息"></a>修改git commit信息</h2><p>1、将当前分支无关的工作状态进行暂存</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、将 <code>HEAD</code> 移动到需要修改的 <code>commit</code> 上</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rebase 9633cf0919^ <span class="token parameter variable">--interactive</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、找到需要修改的 <code>commit</code> ,将首行的 <code>pick</code> 改成 <code>edit</code><br>4、开始着手解决你的 <code>bug</code><br>5、 <code>git add</code> 将改动文件添加到暂存<br>6、 <code>git commit –amend</code> 追加改动到提交<br>7、<code>git rebase –continue</code> 移动 <code>HEAD</code> 回最新的 <code>commit</code><br>8、恢复之前的工作状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash pop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git worktree使用</title>
      <link href="/2022/11/03/git-worktree-shi-yong/"/>
      <url>/2022/11/03/git-worktree-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>使用<code>git worktree</code>同时在多个 branch 上工作。</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><p>参考<a href="https://blog.didispace.com/categories/Git/">一些文章</a></p><p><img src="https://pic1.zhimg.com/80/v2-1688c37a2c59e782b3d7e6b4f75ad7f4_1440w.webp" alt="img"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> worktree <span class="token function">add</span> <span class="token punctuation">[</span>-f<span class="token punctuation">]</span> <span class="token punctuation">[</span>--detach<span class="token punctuation">]</span> <span class="token punctuation">[</span>--checkout<span class="token punctuation">]</span> <span class="token punctuation">[</span>--lock <span class="token punctuation">[</span>--reason <span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-b <span class="token operator">&lt;</span>new-branch<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>path<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>commit-ish<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token function">git</span> worktree list <span class="token punctuation">[</span>-v <span class="token operator">|</span> <span class="token parameter variable">--porcelain</span> <span class="token punctuation">[</span>-z<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token function">git</span> worktree lock <span class="token punctuation">[</span>--reason <span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>worktree<span class="token operator">&gt;</span><span class="token function">git</span> worktree move <span class="token operator">&lt;</span>worktree<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>new-path<span class="token operator">&gt;</span><span class="token function">git</span> worktree prune <span class="token punctuation">[</span>-n<span class="token punctuation">]</span> <span class="token punctuation">[</span>-v<span class="token punctuation">]</span> <span class="token punctuation">[</span>--expire <span class="token operator">&lt;</span>expire<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token function">git</span> worktree remove <span class="token punctuation">[</span>-f<span class="token punctuation">]</span> <span class="token operator">&lt;</span>worktree<span class="token operator">&gt;</span><span class="token function">git</span> worktree repair <span class="token punctuation">[</span><span class="token operator">&lt;</span>path<span class="token operator">&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token function">git</span> worktree unlock <span class="token operator">&lt;</span>worktree<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用git worktree可以仅需维护一个 repo，又可以同时在多个 branch 上工作，互不影响。免去分支切换的苦恼。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> <span class="token function">git</span> worktree <span class="token function">add</span> <span class="token parameter variable">-b</span> <span class="token string">"feature/feature1"</span> <span class="token punctuation">..</span>/feature/feature1 <span class="token comment"># 查看链接工作区下.git</span> <span class="token function">cat</span> .git<span class="token comment"># gitdir: /Users/dongyilong/test/git_test/demo-project/.git/worktrees/feature1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221103204829664.png" alt="image-20221103204829664"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> worktree list <span class="token parameter variable">--porcelain</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221103204931170.png" alt="image-20221103204931170"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> worktree move <span class="token string">"feature/feature1"</span> <span class="token punctuation">..</span>/feature/feature2<span class="token comment"># 不能移动主工作树或者包含子模块的工作树</span><span class="token comment"># 工作树的名字为demo-project， feature/feature2</span><span class="token comment"># git worktree list --porcelain</span>worktree /Users/dongyilong/test/git_test/demo-projectHEAD e1da10447082e472ad8a2b57808d4ef9cec87823branch refs/heads/masterworktree /Users/dongyilong/test/git_test/feature/feature2HEAD e1da10447082e472ad8a2b57808d4ef9cec87823branch refs/heads/feature/feature1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221103205326277.png" alt="image-20221103205326277"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> worktree remove feature/feature2<span class="token function">git</span> worktree remove <span class="token parameter variable">-f</span> feature/feature2<span class="token function">git</span> worktree prune <span class="token comment"># 清除$GIT_DIR/worktrees中的工作树信息。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>clang 编译链接</title>
      <link href="/2022/11/03/clang-bian-yi-lian-jie/"/>
      <url>/2022/11/03/clang-bian-yi-lian-jie/</url>
      
        <content type="html"><![CDATA[<p>clang编译与搜索路径</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><p>如果在mac上自己编译了clang,llvm然后安装了，可能会出现找不到文件的错误。</p><p>可以在<code>~/.zshrc</code>中加入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> clang+<span class="token operator">+=</span><span class="token string">'clang++ -isysroot `xcrun --show-sdk-path` '</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">clang</span><span class="token operator">=</span><span class="token string">'clang -isysroot `xcrun --show-sdk-path` '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xx.c <span class="token comment"># 源文件</span>xx.i <span class="token comment"># 预处理后文件</span>xx.s <span class="token comment"># 汇编代码</span>xx.o <span class="token comment"># 目标文件，引用的其他文件的函数地址尚未定义</span>xx.out <span class="token comment"># 可执行文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译预处理</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clang <span class="token parameter variable">-E</span> xx.c <span class="token comment"># 进行预处理</span>cpp xx.c <span class="token comment"># 编译预处理命令程序是cpp，也可以直接使用cpp进行预处理</span>clang <span class="token parameter variable">-E</span> <span class="token parameter variable">-c</span> xx.i xx.c <span class="token comment"># 保存到文件</span>clang <span class="token parameter variable">-o</span> xx.i xx.c <span class="token comment"># 保存到文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>生成汇编</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clang <span class="token parameter variable">-S</span> xx.cclang <span class="token parameter variable">-S</span> <span class="token parameter variable">-o</span> xx.s xx.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成.o文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clang <span class="token parameter variable">-c</span> xx.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>保存中间步骤</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clang -save-temps xx.c<span class="token comment"># 会生成xx.i xx.s xx.o a.out</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="搜索路径设置"><a href="#搜索路径设置" class="headerlink" title="搜索路径设置"></a>搜索路径设置</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;xxx&gt;</span> <span class="token comment">// 只在默认的系统包含路径搜索头文件</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"xxx"</span> <span class="token comment">// 现在当前目录搜索头文件</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clang <span class="token parameter variable">-Ixxx</span> <span class="token comment"># 增加头文件搜索目录</span>clang <span class="token parameter variable">-include</span> /xxx/xx.h <span class="token comment"># 增加头文件</span>clang <span class="token parameter variable">-Lxxx</span> <span class="token comment"># 增加库搜索目录</span>clang <span class="token parameter variable">-lxx</span> <span class="token comment"># 增加库文件  libxx.后缀</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用编译选项"><a href="#常用编译选项" class="headerlink" title="常用编译选项"></a>常用编译选项</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-Wall</span> <span class="token builtin class-name">:</span> 显示所有常用的编译警告信息。<span class="token parameter variable">-W</span> <span class="token builtin class-name">:</span> 显示更多的常用编译警告，如：变量未使用、一些逻辑错误。<span class="token parameter variable">-Werror</span> <span class="token builtin class-name">:</span> 将警告升级为错误<span class="token parameter variable">-fPIC</span> <span class="token builtin class-name">:</span> 共享库应创建位置无关代码<span class="token parameter variable">-v</span> <span class="token builtin class-name">:</span> 打印编译一个文件的所有步骤<span class="token parameter variable">-D</span> <span class="token builtin class-name">:</span> -D<span class="token operator">&lt;</span>macroname<span class="token operator">&gt;=</span><span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> 定义宏<span class="token parameter variable">-U</span> <span class="token builtin class-name">:</span> undef@xx <span class="token builtin class-name">:</span> 从文件xx中读取参数<span class="token parameter variable">-std</span> <span class="token builtin class-name">:</span> <span class="token parameter variable">-std</span><span class="token operator">=</span>c++11/c++14/c++17/c90/c89/<span class="token parameter variable">-static</span> <span class="token parameter variable">-shared</span>-ccc-print-phases <span class="token builtin class-name">:</span> 打印编译阶段-L<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--prefix</span> gperftools<span class="token variable">)</span></span>/lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html">其他参数</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> clang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMake Cookbook 第二章: 检测环境</title>
      <link href="/2022/10/31/cmake-cookbook-di-er-zhang-jian-ce-huan-jing/"/>
      <url>/2022/10/31/cmake-cookbook-di-er-zhang-jian-ce-huan-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="CMake-Cookbook-第二章-检测环境"><a href="#CMake-Cookbook-第二章-检测环境" class="headerlink" title="CMake Cookbook 第二章: 检测环境"></a>CMake Cookbook 第二章: 检测环境</h1><span id="more"></span><!-- markdownlint-disable MD041 MD002--><p>本文是对 <a href="https://github.com/xiaoweiChen/CMake-Cookbook/blob/master/SUMMARY.md">cmake cookbook中文翻译</a>的学习笔记记录，建议看原文。</p><h2 id="检测操作系统环境"><a href="#检测操作系统环境" class="headerlink" title="检测操作系统环境"></a>检测操作系统环境</h2><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">CMAKE_SYSTEM_NAME</span> <span class="token operator">STREQUAL</span> <span class="token string">"Linux"</span><span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"Configuring on/for Linux"</span><span class="token punctuation">)</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">CMAKE_SYSTEM_NAME</span> <span class="token operator">STREQUAL</span> <span class="token string">"Darwin"</span><span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"Configuring on/for macOS"</span><span class="token punctuation">)</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">CMAKE_SYSTEM_NAME</span> <span class="token operator">STREQUAL</span> <span class="token string">"Windows"</span><span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"Configuring on/for Windows"</span><span class="token punctuation">)</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">CMAKE_SYSTEM_NAME</span> <span class="token operator">STREQUAL</span> <span class="token string">"AIX"</span><span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"Configuring on/for IBM AIX"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"Configuring on/for <span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">CMAKE_SYSTEM_NAME</span><span class="token punctuation">}</span></span>"</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理平台和编译器相关代码"><a href="#处理平台和编译器相关代码" class="headerlink" title="处理平台和编译器相关代码"></a>处理平台和编译器相关代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>std<span class="token double-colon punctuation">::</span>string <span class="token function">say_hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">IS_WINDOWS</span></span>  <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Hello from Windows!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">IS_LINUX</span></span>  <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Hello from Linux!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">IS_MACOS</span></span>  <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Hello from macOS!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>  <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Hello from an unknown system!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">IS_INTEL_CXX_COMPILER</span></span>  <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Hello Intel compiler!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">IS_GNU_CXX_COMPILER</span></span>  <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Hello GNU compiler!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">IS_PGI_CXX_COMPILER</span></span>  <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Hello PGI compiler!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">IS_XL_CXX_COMPILER</span></span>  <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Hello XL compiler!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>  <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Hello unknown compiler - have we met before?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">say_hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"compiler name is "</span> COMPILER_NAME <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.5</span> FATAL_ERROR<span class="token punctuation">)</span><span class="token keyword">project</span><span class="token punctuation">(</span>recipe-<span class="token number">02</span> LANGUAGES CXX<span class="token punctuation">)</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span>hello-world hello-world.cpp<span class="token punctuation">)</span><span class="token comment"># 处理平台相关代码</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">CMAKE_SYSTEM_NAME</span> <span class="token operator">STREQUAL</span> <span class="token string">"Linux"</span><span class="token punctuation">)</span>  <span class="token keyword">target_compile_definitions</span><span class="token punctuation">(</span>hello-world <span class="token namespace">PUBLIC</span> <span class="token string">"IS_LINUX"</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">CMAKE_SYSTEM_NAME</span> <span class="token operator">STREQUAL</span> <span class="token string">"Darwin"</span><span class="token punctuation">)</span>  <span class="token keyword">target_compile_definitions</span><span class="token punctuation">(</span>hello-world <span class="token namespace">PUBLIC</span> <span class="token string">"IS_MACOS"</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">CMAKE_SYSTEM_NAME</span> <span class="token operator">STREQUAL</span> <span class="token string">"Windows"</span><span class="token punctuation">)</span>  <span class="token keyword">target_compile_definitions</span><span class="token punctuation">(</span>hello-world <span class="token namespace">PUBLIC</span> <span class="token string">"IS_WINDOWS"</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 处理编译器相关代码</span><span class="token keyword">target_compile_definitions</span><span class="token punctuation">(</span>hello-world <span class="token namespace">PUBLIC</span> <span class="token string">"COMPILER_NAME=\"<span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">CMAKE_CXX_COMPILER_ID</span><span class="token punctuation">}</span></span>\""</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_COMPILER_ID</span> <span class="token operator">MATCHES</span> Intel<span class="token punctuation">)</span>  <span class="token keyword">target_compile_definitions</span><span class="token punctuation">(</span>hello-world <span class="token namespace">PUBLIC</span> <span class="token string">"IS_INTEL_CXX_COMPILER"</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_COMPILER_ID</span> <span class="token operator">MATCHES</span> GNU<span class="token punctuation">)</span>  <span class="token keyword">target_compile_definitions</span><span class="token punctuation">(</span>hello-world <span class="token namespace">PUBLIC</span> <span class="token string">"IS_GNU_CXX_COMPILER"</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_COMPILER_ID</span> <span class="token operator">MATCHES</span> PGI<span class="token punctuation">)</span>  <span class="token keyword">target_compile_definitions</span><span class="token punctuation">(</span>hello-world <span class="token namespace">PUBLIC</span> <span class="token string">"IS_PGI_CXX_COMPILER"</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_COMPILER_ID</span> <span class="token operator">MATCHES</span> XL<span class="token punctuation">)</span>  <span class="token keyword">target_compile_definitions</span><span class="token punctuation">(</span>hello-world <span class="token namespace">PUBLIC</span> <span class="token string">"IS_XL_CXX_COMPILER"</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="检测处理器体系结构与指令集"><a href="#检测处理器体系结构与指令集" class="headerlink" title="检测处理器体系结构与指令集"></a>检测处理器体系结构与指令集</h2><p>暂时用不到</p><p><a href="https://github.com/xiaoweiChen/CMake-Cookbook/blob/master/content/chapter2/2.4-chinese.md">需要可以点击查看</a></p><h2 id="为Eigen库使能向量化"><a href="#为Eigen库使能向量化" class="headerlink" title="为Eigen库使能向量化"></a>为Eigen库使能向量化</h2><p>暂时用不到</p><p><a href="https://github.com/xiaoweiChen/CMake-Cookbook/blob/master/content/chapter2/2.6-chinese.md">需要可以点击查看</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CMake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMake Cookbook 第一章：从可执行文件到库</title>
      <link href="/2022/10/31/cmake-cookbook-di-yi-zhang-cong-ke-zhi-xing-wen-jian-dao-ku/"/>
      <url>/2022/10/31/cmake-cookbook-di-yi-zhang-cong-ke-zhi-xing-wen-jian-dao-ku/</url>
      
        <content type="html"><![CDATA[<p>CMake Cookbook 第一章：从可执行文件到库</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><p>本文是对 <a href="https://github.com/xiaoweiChen/CMake-Cookbook/blob/master/SUMMARY.md">cmake cookbook中文翻译</a>的学习笔记记录，建议看原文。</p><p>CMake是一个构建系统生成器。将描述构建系统(如：Unix Makefile、Ninja、Visual Studio等)应当如何操作才能编译代码。</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.5</span> FATAL_ERROR<span class="token punctuation">)</span><span class="token keyword">project</span><span class="token punctuation">(</span>recipe-<span class="token number">01</span> LANGUAGES C CXX<span class="token punctuation">)</span> <span class="token comment"># 可以设置语言</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="切换生成器"><a href="#切换生成器" class="headerlink" title="切换生成器"></a>切换生成器</h2><p>CMake语言不区分大小写，但是参数区分</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> build<span class="token builtin class-name">cd</span> buildcmake <span class="token parameter variable">-G</span> Ninja <span class="token punctuation">..</span> <span class="token comment"># -G切换生成器</span><span class="token comment"># cmake -H. -Bbuild</span><span class="token comment"># -H.代表在当前目录搜索根CMakeLists.txtx文件，</span><span class="token comment"># -Bbuild表示在名为build的目录下生成所有文件</span>cmake <span class="token parameter variable">--build</span> <span class="token builtin class-name">.</span> <span class="token comment"># 编译</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="静态库与动态库"><a href="#静态库与动态库" class="headerlink" title="静态库与动态库"></a>静态库与动态库</h2><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">add_library</span><span class="token punctuation">(</span><span class="token punctuation">${</span>libname_static<span class="token punctuation">}</span> <span class="token namespace">STATIC</span> xxx.h xxx.cpp<span class="token punctuation">)</span><span class="token keyword">add_library</span><span class="token punctuation">(</span><span class="token punctuation">${</span>libname_shared<span class="token punctuation">}</span> <span class="token namespace">SHARED</span> xxx.h xxx.cpp<span class="token punctuation">)</span><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span><span class="token punctuation">${</span>exename<span class="token punctuation">}</span> <span class="token punctuation">${</span>libname_static<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span><span class="token punctuation">${</span>exename<span class="token punctuation">}</span> <span class="token punctuation">${</span>libname_shared<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://crascit.com/2016/01/31/enhanced-source-file-handling-with-target_sources/">target_sources介绍</a></p><p><code>target_include_directories</code></p><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">set</span><span class="token punctuation">(</span>USE_LIBRARY <span class="token boolean">OFF</span><span class="token punctuation">)</span> <span class="token comment"># 硬编码 </span><span class="token comment"># 1, ON, YES, true, Y,非0数，为true</span><span class="token comment"># 0, OFF, NO, false, N, IGNORE, NOTFOUND, 空字符串，为false</span><span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"Compile source into a library? <span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">USE_LIBRARY</span><span class="token punctuation">}</span></span>"</span><span class="token punctuation">)</span><span class="token keyword">list</span><span class="token punctuation">(</span>APPEND _sources Message.hpp Message.cpp<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>USE_LIBRARY<span class="token punctuation">)</span><span class="token keyword">add_library</span><span class="token punctuation">(</span>message <span class="token punctuation">${</span>_sources<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span>hello-world hello-world.cpp<span class="token punctuation">)</span><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>hello-world message<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">(</span>USE_LIBRARY<span class="token punctuation">)</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span>hello-world hello-world.cpp <span class="token punctuation">${</span>_sources<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span>USE_LIBRARY<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>局部变量可以在名称前加下划线</p><h2 id="cmake-选项-option"><a href="#cmake-选项-option" class="headerlink" title="cmake 选项 option"></a>cmake 选项 option</h2><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">include</span><span class="token punctuation">(</span>CMakeDependentOption<span class="token punctuation">)</span><span class="token comment"># cmake可以通过包含模块扩展语法和功能</span><span class="token comment"># cmake --help-module CMakeDependentOption 可以查看手册</span><span class="token keyword">option</span><span class="token punctuation">(</span>USE_LIBRARY <span class="token string">"Compile source into a library"</span> <span class="token boolean">OFF</span><span class="token punctuation">)</span><span class="token comment"># 使用方式 option(变量名 帮助字符串 默认值)</span><span class="token comment"># cmake -H. -Bbuild -D USE_LIBRARY=ON 可以开启选项</span><span class="token comment"># 有依赖关系到选项</span><span class="token function">cmake_dependent_option</span><span class="token punctuation">(</span>MAKE_STATIC_LIBRARY <span class="token string">"Compile sources into a static library"</span> <span class="token boolean">OFF</span><span class="token string">"USE_LIBRARY"</span> <span class="token boolean">ON</span><span class="token punctuation">)</span><span class="token function">cmake_dependent_option</span><span class="token punctuation">(</span>MAKE_SHARED_LIBRARY <span class="token string">"Compile sources into a shared library"</span> <span class="token boolean">ON</span><span class="token string">"USE_LIBRARY"</span> <span class="token boolean">ON</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="指定编译器"><a href="#指定编译器" class="headerlink" title="指定编译器"></a>指定编译器</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cmake -H. <span class="token parameter variable">-Bbuild</span> <span class="token parameter variable">-D</span> <span class="token assign-left variable">CMAKE_CXX_COMPILER</span><span class="token operator">=</span>clang++<span class="token comment"># 指定编译器</span>cmake --system-information information.txt<span class="token comment"># 可用的编译器和编译器标志</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="切换构建类型"><a href="#切换构建类型" class="headerlink" title="切换构建类型"></a>切换构建类型</h2><p>CMake可以配置构建类型，例如：Debug、Release等。配置时，可以为Debug或Release构建设置相关的选项或属性，例如：编译器和链接器标志。控制生成构建系统使用的配置变量是<code>CMAKE_BUILD_TYPE</code>。该变量默认为空，可选值如下：</p><p>Debug, Release<br>RelWithDebInfo：用于构建较少的优化库或可执行文件，包含调试符号。<br>MinSizeRel：用于不增加目标代码大小的优化方式来构建库或可执行文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cmake -H. <span class="token parameter variable">-Bbuild</span> <span class="token parameter variable">-D</span> <span class="token assign-left variable">CMAKE_BUILD_TYPE</span><span class="token operator">=</span>Debug<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">NOT</span> <span class="token variable">CMAKE_BUILD_TYPE</span><span class="token punctuation">)</span> <span class="token comment"># 便于命令行覆盖</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_BUILD_TYPE</span> Release <span class="token variable">CACHE</span> STRING <span class="token string">"Build type"</span> FORCE<span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"Build type: <span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">CMAKE_BUILD_TYPE</span><span class="token punctuation">}</span></span>"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>为Release版和Debug版单独创建构建目录会比较方便。</p><h2 id="设置编译选项"><a href="#设置编译选项" class="headerlink" title="设置编译选项"></a>设置编译选项</h2><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">list</span><span class="token punctuation">(</span>APPEND flags <span class="token string">"-fPIC"</span> <span class="token string">"-Wall"</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">NOT</span> <span class="token variable">WIN32</span><span class="token punctuation">)</span>  <span class="token keyword">list</span><span class="token punctuation">(</span>APPEND flags <span class="token string">"-Wextra"</span> <span class="token string">"-Wpedantic"</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">target_compile_options</span><span class="token punctuation">(</span>testlib  <span class="token namespace">PRIVATE</span>    <span class="token punctuation">${</span>flags<span class="token punctuation">}</span>  <span class="token punctuation">)</span><span class="token comment"># PRIVATE，编译选项会应用于给定的目标，不会传递给与目标相关的目标</span><span class="token comment"># INTERFACE，给定的编译选项将只应用于指定目标，并传递给与目标相关的目标。</span><span class="token comment"># PUBLIC，编译选项将应用于指定目标和使用它的目标。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cmake <span class="token parameter variable">--build</span> <span class="token builtin class-name">.</span> -- <span class="token assign-left variable">VERBOSE</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment"># 设置VERBOSE可以看到详细的编译参数和过程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">set</span><span class="token punctuation">(</span>COMPILER_FLAGS<span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">(</span>COMPILER_FLAGS_DEBUG<span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">(</span>COMPILER_FLAGS_RELEASE<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_COMPILER_ID</span> <span class="token operator">MATCHES</span> GNU<span class="token punctuation">)</span>  <span class="token keyword">list</span><span class="token punctuation">(</span>APPEND CXX_FLAGS <span class="token string">"-fno-rtti"</span> <span class="token string">"-fno-exceptions"</span><span class="token punctuation">)</span>  <span class="token keyword">list</span><span class="token punctuation">(</span>APPEND CXX_FLAGS_DEBUG <span class="token string">"-Wsuggest-final-types"</span> <span class="token string">"-Wsuggest-final-methods"</span> <span class="token string">"-Wsuggest-override"</span><span class="token punctuation">)</span>  <span class="token keyword">list</span><span class="token punctuation">(</span>APPEND CXX_FLAGS_RELEASE <span class="token string">"-O3"</span> <span class="token string">"-Wno-unused"</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_COMPILER_ID</span> <span class="token operator">MATCHES</span> Clang<span class="token punctuation">)</span>  <span class="token keyword">list</span><span class="token punctuation">(</span>APPEND CXX_FLAGS <span class="token string">"-fno-rtti"</span> <span class="token string">"-fno-exceptions"</span> <span class="token string">"-Qunused-arguments"</span> <span class="token string">"-fcolor-diagnostics"</span><span class="token punctuation">)</span>  <span class="token keyword">list</span><span class="token punctuation">(</span>APPEND CXX_FLAGS_DEBUG <span class="token string">"-Wdocumentation"</span><span class="token punctuation">)</span>  <span class="token keyword">list</span><span class="token punctuation">(</span>APPEND CXX_FLAGS_RELEASE <span class="token string">"-O3"</span> <span class="token string">"-Wno-unused"</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">target_compile_option</span><span class="token punctuation">(</span>compute-areas  <span class="token namespace">PRIVATE</span>    <span class="token punctuation">${</span>CXX_FLAGS<span class="token punctuation">}</span>    <span class="token string">"$&lt;$&lt;CONFIG:Debug&gt;:<span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">CXX_FLAGS_DEBUG</span><span class="token punctuation">}</span></span>&gt;"</span>    <span class="token string">"$&lt;$&lt;CONFIG:Release&gt;:<span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">CXX_FLAGS_RELEASE</span><span class="token punctuation">}</span></span>&gt;"</span>  <span class="token punctuation">)</span><span class="token comment"># 为不同配置使用不同flags</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置语言标准"><a href="#设置语言标准" class="headerlink" title="设置语言标准"></a>设置语言标准</h2><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">set_target_properties</span><span class="token punctuation">(</span>animal-farm  <span class="token namespace">PROPERTIES</span>    <span class="token property">CXX_STANDARD</span> <span class="token number">14</span>    <span class="token property">CXX_EXTENSIONS</span> <span class="token boolean">OFF</span> <span class="token comment"># 只启用ISO C++标准的编译器标志，而不使用特定编译器的扩展。</span>    <span class="token property">CXX_STANDARD_REQUIRED</span> <span class="token boolean">ON</span> <span class="token comment"># 如果这个版本不可用，CMake将停止配置并出现错误</span>  <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">list</span><span class="token punctuation">(</span>  APPEND sources_with_lower_optimization    geometry_circle.cpp    geometry_rhombus.cpp  <span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"Setting source properties using IN LISTS syntax:"</span><span class="token punctuation">)</span><span class="token keyword">foreach</span><span class="token punctuation">(</span>_source IN LISTS sources_with_lower_optimization<span class="token punctuation">)</span>  <span class="token keyword">set_source_files_properties</span><span class="token punctuation">(</span><span class="token punctuation">${</span>_source<span class="token punctuation">}</span> <span class="token namespace">PROPERTIES</span> <span class="token property">COMPILE_FLAGS</span> -O2<span class="token punctuation">)</span>  <span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"Appending -O2 flag for <span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">_source</span><span class="token punctuation">}</span></span>"</span><span class="token punctuation">)</span><span class="token keyword">endforeach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"Querying sources properties using plain syntax:"</span><span class="token punctuation">)</span><span class="token keyword">foreach</span><span class="token punctuation">(</span>_source <span class="token punctuation">${</span>sources_with_lower_optimization<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">get_source_file_property</span><span class="token punctuation">(</span>_flags <span class="token punctuation">${</span>_source<span class="token punctuation">}</span> <span class="token property">COMPILE_FLAGS</span><span class="token punctuation">)</span>  <span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"Source <span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">_source</span><span class="token punctuation">}</span></span> has the following extra COMPILE_FLAGS: <span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">_flags</span><span class="token punctuation">}</span></span>"</span><span class="token punctuation">)</span><span class="token keyword">endforeach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>set_source_files_properties(file PROPERTIES property value) </code>，它将属性设置为给定文件的传递值。</p><p><code>get_source_file_property(VAR file property)</code>，检索给定文件所需属性的值，并将其存储在CMake<code>VAR</code>变量中。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CMake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript学习 基础</title>
      <link href="/2022/10/30/javascript-xue-xi-ji-chu/"/>
      <url>/2022/10/30/javascript-xue-xi-ji-chu/</url>
      
        <content type="html"><![CDATA[<p>Javascript基础知识</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/A_first_splash">javascript mdn</a></p><p><a href="https://wangdoc.com/javascript/">JavaScript教程</a></p><p><a href="https://wangdoc.com/es6/intro">ECMAScript6学习</a></p><p><a href="https://wangdoc.com/">网道</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客</title>
      <link href="/2022/10/30/da-jian-ge-ren-bo-ke/"/>
      <url>/2022/10/30/da-jian-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>博客制作教程：typora图床 + 域名与github部署 + 博客样式</p><span id="more"></span><h1 id="搭建个人博客"><a href="#搭建个人博客" class="headerlink" title="搭建个人博客"></a>搭建个人博客</h1><h2 id="写作工具"><a href="#写作工具" class="headerlink" title="写作工具"></a>写作工具</h2><p>阿里云 oss 对象存储 + PicGo + Typora =&gt; 自动上传图片的md编辑器</p><p>相信具体步骤很容易就能查到，我就不写了。</p><p><a href="https://zhuanlan.zhihu.com/p/344973958">https://zhuanlan.zhihu.com/p/344973958</a></p><h2 id="网站部署"><a href="#网站部署" class="headerlink" title="网站部署"></a>网站部署</h2><p>阿里云域名与解析 + Github Page + ssh =&gt; 网站部署方式</p><p>相信具体步骤很容易就能查到，我就只写几个注意点。</p><p><code>/blog/source</code>下新建文件<code>CNAME</code>，文件内容是自己的域名，例如<code>yilongdong.top</code></p><p>(域名解析A记录也能用，但是还是CNAME更好)</p><p>给github设置了ssh公钥后还需要获取token。第一次上传文件需要登陆，token就是密码。之后就免密了。</p><p>GitHub page开启https。</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221030235353714.png" alt="image-20221030235353714"></p><p><a href="https://blog.51cto.com/u_15064642/2572458">https://blog.51cto.com/u_15064642/2572458</a></p><h2 id="博客样式"><a href="#博客样式" class="headerlink" title="博客样式"></a>博客样式</h2><p>Hexo + 闪烁之狐主题 + 手动配置 =&gt; 网站样式</p><p>相信具体步骤很容易就能查到，我就不写了。</p><p><a href="http://blinkfox.com/">http://blinkfox.com</a></p><p>其他样式</p><p><a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><h2 id="博客订阅"><a href="#博客订阅" class="headerlink" title="博客订阅"></a>博客订阅</h2><p>开启RSS后，可以在Fluent阅读器下订阅</p><p>添加订阅源</p><p>xxx/atom.xml</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221030234415357.png" alt="image-20221030234415357"></p><p>开启提醒规则</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221030234516346.png" alt="image-20221030234516346"></p><p>设置抓取频率</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221030234555569.png" alt="image-20221030234555569"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
