<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>空域图像增强技术</title>
      <link href="//post/kong-yu-tu-xiang-zeng-qiang-ji-zhu.html"/>
      <url>//post/kong-yu-tu-xiang-zeng-qiang-ji-zhu.html</url>
      
        <content type="html"><![CDATA[<p>背景，直方图，算术逻辑操作，平滑滤波器，锐化滤波器，混合空间增强，图像素描效果</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><p>[TOC]</p><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><h3 id="定义（What）"><a href="#定义（What）" class="headerlink" title="定义（What）"></a>定义（What）</h3><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>图像增强：突出一幅图像中的某些信息，同时，削弱或去除某些不需要的信息的方法。</strong></p></blockquote><h3 id="目的（Why）"><a href="#目的（Why）" class="headerlink" title="目的（Why）"></a>目的（Why）</h3><p>改善图像的视觉效果，或者将图像转换成一种更适合人或机器进行分析处理的形式。图像增强并不以图像保真为准则，而是突出有意义的信息，抑制无用信息，提高图像使用价值。</p><h3 id="方法（How）"><a href="#方法（How）" class="headerlink" title="方法（How）"></a>方法（How）</h3><h4 id="空间域处理"><a href="#空间域处理" class="headerlink" title="空间域处理"></a>空间域处理</h4><ul><li>全局运算：在整个图像空间域进行</li><li>局部运算：在像素有关的空间域进行</li><li>点运算：对图像作逐点运算</li></ul><h4 id="频域处理"><a href="#频域处理" class="headerlink" title="频域处理"></a>频域处理</h4><ul><li>在图像的Fourier变换域上进行处理</li></ul><h2 id="空域图像增强"><a href="#空域图像增强" class="headerlink" title="空域图像增强"></a>空域图像增强</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>空域图像增强的一般数学表达式：<br>$$<br>g(x, y) = T[f(x, y)]<br>$$</p><p>算子<code>T</code>在操作<code>(x, y)</code>的某个邻域上（掩码处理/滤波）</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221123110144718.png" alt="image-20221123110144718"></p><h3 id="基本的灰度变换（点处理）"><a href="#基本的灰度变换（点处理）" class="headerlink" title="基本的灰度变换（点处理）"></a>基本的灰度变换（点处理）</h3><p>当领域为<code>1X1</code>，此时<code>T</code>成为灰度级变换函数，此时处理成为点处理。<code>s</code>为输出灰度级，r为输入灰度级。<br>$$<br>s = T(r)<br>$$<br>两个常用的灰度级变换函数：对照度拉伸和阈值函数</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221123110520983.png" alt="image-20221123110520983"></p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221123110730424.png" alt="image-20221123110730424"></p><p>一般查表获得映射关系。</p><h4 id="负（反转）变换"><a href="#负（反转）变换" class="headerlink" title="负（反转）变换"></a>负（反转）变换</h4><p>$$<br>s = T(r) = L - 1 -r<br>$$</p><p>如图图像的灰度范围为<code>[0, L-1]</code></p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221123111246594.png" alt="image-20221123111246594"></p><h4 id="对数变换"><a href="#对数变换" class="headerlink" title="对数变换"></a>对数变换</h4><p>$$<br>s = c\log(1 + r), r \geq 0<br>$$</p><p>对数变换可以扩散低灰度级范围，压缩高灰度级范围。</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221123112019056.png" alt="image-20221123112019056"></p><h4 id="幂率变换"><a href="#幂率变换" class="headerlink" title="幂率变换"></a>幂率变换</h4><p>$$<br>s = C r^{\gamma}  \quad C,\gamma &gt; 0<br>$$</p><p>当<code>c = 1</code>时</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221123112800756.png" alt="image-20221123112800756"></p><p>幂率变换可以用于输入图像的r校正。数字图像信息的获取来自CCD图像传感器。但是CCD的输入输出特性不是线性的，所以需要进行校正处理，也叫<strong>伽马校正</strong>。</p><p>设CCD的输入（入射光强度）为r，输出（电流前端）为s，则<br>$$<br>s = Cr^{\gamma}<br>$$<br>所以需要进行逆变换进行校正。下图是效果示意。</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221123113524580.png" alt="image-20221123113524580"></p><p>伽马校正被广泛使用在图像捕捉、打印和显示设备上。</p><p>幂率变换也可以用来压缩亮或暗的灰度级。</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221123114152398.png" alt="image-20221123114152398"></p><h4 id="线性变换"><a href="#线性变换" class="headerlink" title="线性变换"></a>线性变换</h4><h5 id="线性灰度变换"><a href="#线性灰度变换" class="headerlink" title="线性灰度变换"></a>线性灰度变换</h5><p>在图像对比度不足，使得细节分辨不清使可以将灰度范围线性扩展。</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221123115238807.png" alt="image-20221123115238807"></p><h5 id="分段线性灰度变换"><a href="#分段线性灰度变换" class="headerlink" title="分段线性灰度变换"></a>分段线性灰度变换</h5><p>将感兴趣的灰度范围线性扩展，相对抑制不感兴趣的灰度区域。</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221123115519279.png" alt="image-20221123115519279"></p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221123115609850.png" alt="image-20221123115609850"></p><h4 id="灰度切割"><a href="#灰度切割" class="headerlink" title="灰度切割"></a>灰度切割</h4><p>用于突出某个特定的灰度范围，从而增强某个专门的特征。如卫星图像的水团。</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221123120009464.png" alt="image-20221123120009464"></p><h4 id="位平面切割"><a href="#位平面切割" class="headerlink" title="位平面切割"></a>位平面切割</h4><p>位平面切割把数字图像分解成位平面的组合。可以在图像量化时帮助决定使用的位数是否足够，在图像压缩中也有用。</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221123120414566.png" alt="image-20221123120414566"></p><p>从图上可以看到，前四位包含类视觉上的重要信息。其他位包含较多细节信息。</p><h3 id="灰度直方图"><a href="#灰度直方图" class="headerlink" title="灰度直方图"></a>灰度直方图</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>灰度图上一个二维图，横坐标表示灰度级，纵坐标表示出现次数（像素个数）。</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221123123445199.png" alt="image-20221123123445199"></p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221123123547855.png" alt="image-20221123123547855"></p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221123123622781.png" alt="image-20221123123622781"></p><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><p>直方图描述了每个灰度级具有的像素的个数，反映的是图像灰度的统计信息，但<strong>丢失了所有这些像素点的空间信息</strong>，即像素点的相对位置。因此，任一特定的图像有唯一的直方图，但反之并不成立。</p><p>归一化灰度直方图可以得到图像的概率密度函数（PDF）。</p><p>通过直方图可以反映图像的总体性质。</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221123123759821.png" alt="image-20221123123759821"></p><p>直方图可以用于数字化参数的选择和边界阈值的选取。</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221123124018841.png" alt="image-20221123124018841"></p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221123124024375.png" alt="image-20221123124024375"></p><h4 id="色彩直方图"><a href="#色彩直方图" class="headerlink" title="色彩直方图"></a>色彩直方图</h4><p>色彩直方图是高维直方图的特例，它统计色彩的出现频率，即色彩的概率分布信息。一般不直接在RGB色彩空间中统计，而是在将亮度分离出来后，对代表色彩部分的信息进行统计，如在HSI空间的HS子空间、YUV空间的UV子空间，以及其它反映人类视觉特点的彩色空间表示中进行。</p><h4 id="直方图均衡处理"><a href="#直方图均衡处理" class="headerlink" title="直方图均衡处理"></a>直方图均衡处理</h4><p>直方图均衡化(Histogram Equalization)是一种增强图像对比度(Image Contrast)的方法，其主要思想是将一副图像的直方图分布变成近似均匀分布，从而增强图像的对比度。<br>$$<br>假设有图像A，其直方图分布H_A(D)，D是灰度。\<br>现在我们向利用一个单调非线性映射f:R-&gt;R 进行点处理，将图像A变为B，\即对A图像的每个像素点施加f变换<br>$$</p><h3 id="局部增强"><a href="#局部增强" class="headerlink" title="局部增强"></a>局部增强</h3><h3 id="代数和逻辑运算"><a href="#代数和逻辑运算" class="headerlink" title="代数和逻辑运算"></a>代数和逻辑运算</h3><h3 id="空间锐化滤波器"><a href="#空间锐化滤波器" class="headerlink" title="空间锐化滤波器"></a>空间锐化滤波器</h3><p>加强图像的边缘或轮廓，或者提取边缘。</p><p>各向同性的边缘检测算子，对任意边缘轮廓有相同的检测能力。</p>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图形图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1数字图像处理-基础</title>
      <link href="//post/1-shu-zi-tu-xiang-chu-li-ji-chu.html"/>
      <url>//post/1-shu-zi-tu-xiang-chu-li-ji-chu.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><!-- markdownlint-disable MD041 MD002--><p>人眼视觉要素：</p><p>视网膜的感光细胞：</p><p>​杆状细胞：单色弱光</p><p>​锥状细胞：彩色强光</p><p>色彩模型：</p><p>RGB模型</p><p>HIS模型 H: hue色相 S: saturation 饱和度 I: intensity 强度，明度</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221121192511004.png" alt="image-20221121192511004"></p><p>YUV模型</p><p>YCbCr模型</p><p>空间离散：采样</p><p>幅值离散：量化</p><p>二值图像，黑白图像，每个像素1bit</p><p>二值图像可以用特殊的表示方法，比如链码(Freeman码)，可以用来表示直线或曲线组成的二值图像，描述边界轮廓。可以达到相当高的压缩效率。</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221121193246565.png" alt="image-20221121193246565"></p><p>图像文件存储格式：</p><p>BMP格式，基本上一般是一种非压缩图像格式</p><p>JPEG文件格式，静止图像压缩，有损编码方式，是一种变换编码，对高低频信号区别对待。</p><p>GIF文件格式，采用复杂的LZW编码方式，一个GIF文件可以存储多幅图像，支持图像定序显示。</p><p>TIFF文件格式，是光栅图像文件格式，可能来源有扫描仪，CAD系统，地理信息等。</p><p>图像像素间的基本关系</p><ol><li>像素邻域（neibors）4邻域，8邻域</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1数字图像处理-绪论</title>
      <link href="//post/1-shu-zi-tu-xiang-chu-li-xu-lun.html"/>
      <url>//post/1-shu-zi-tu-xiang-chu-li-xu-lun.html</url>
      
        <content type="html"><![CDATA[<p>点击阅读前文前, 首页能看到的文章的简短描述</p><span id="more"></span><!-- markdownlint-disable MD041 MD002-->]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Basics</title>
      <link href="//post/java-basics.html"/>
      <url>//post/java-basics.html</url>
      
        <content type="html"><![CDATA[<h1 id="The-Java-Programming-Language-and-the-Java-Platform"><a href="#The-Java-Programming-Language-and-the-Java-Platform" class="headerlink" title="The Java Programming Language and the Java Platform"></a>The Java Programming Language and the Java Platform</h1><span id="more"></span><!-- markdownlint-disable MD041 MD002--><p><a href="https://www.oracle.com/topics/technologies/newtojava/programming-center.html">https://www.oracle.com/topics/technologies/newtojava/programming-center.html</a></p><p>Java 平台的两个主要组件是 Java 应用程序编程接口 (API)和将 Java 代码解释为机器语言的 Java 虚拟机 (JVM)。</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/jvm.png" alt="JVM"></p><p>API和JVM使得程序独立于硬件</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/javaplatform.png" alt="Java Platform"></p><ul><li><a href="http://docs.oracle.com/javase/tutorial/getStarted/intro/definition.html">Learn about the JVM and the APIs</a></li></ul><p>Learn Java programming with <a href="http://docs.oracle.com/javase/tutorial/index.html">The Java Tutorials</a>, a comprehensive source for Java language concepts. Object-oriented and Java programming are explained with graphics and code examples.</p><p>The <a href="https://www.oracle.com/java/newtojava/young-developers.html">Young Developers </a>page summarizes the tools and learning resources for each software tool.</p><p><strong>Recommended books:</strong></p><ul><li>“Core Java, Volume I - Fundamentals (9th edition) by Cay Horstmann and Gary Cornell</li><li>“Core Java, Volume II – Advanced Features (9th edition) by Cay Horstmann and Gary Cornell</li><li><a href="http://shop.oreilly.com/product/9780596009205.do">“Head first Java”</a> by Kathy Sierra and Bert Bates</li><li>“Thinking in Java” by Bruce Eckel<br><a href="https://blogs.oracle.com/javamagazine/">Oracle Java Magazine</a> book section</li></ul><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-组件协作</title>
      <link href="//post/she-ji-mo-shi-zu-jian-xie-zuo.html"/>
      <url>//post/she-ji-mo-shi-zu-jian-xie-zuo.html</url>
      
        <content type="html"><![CDATA[<p>点击阅读前文前, 首页能看到的文章的简短描述</p><span id="more"></span><!-- markdownlint-disable MD041 MD002-->]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>银发经济的黄金期--社会经济如何迎接老龄化时代的到来</title>
      <link href="//post/yin-fa-jing-ji-de-huang-jin-qi-she-hui-jing-ji-ru-he-ying-jie-lao-ling-hua-shi-dai-de-dao-lai.html"/>
      <url>//post/yin-fa-jing-ji-de-huang-jin-qi-she-hui-jing-ji-ru-he-ying-jie-lao-ling-hua-shi-dai-de-dao-lai.html</url>
      
        <content type="html"><![CDATA[<p>点击阅读前文前, 首页能看到的文章的简短描述</p><span id="more"></span><!-- markdownlint-disable MD041 MD002-->]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 老龄化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust安装</title>
      <link href="//post/rust-an-zhuang.html"/>
      <url>//post/rust-an-zhuang.html</url>
      
        <content type="html"><![CDATA[<p>点击阅读前文前, 首页能看到的文章的简短描述</p><span id="more"></span><!-- markdownlint-disable MD041 MD002-->]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.3 cmake主要语法 属性与变量</title>
      <link href="//post/2-3-cmake-zhu-yao-yu-fa-shu-xing-yu-bian-liang.html"/>
      <url>//post/2-3-cmake-zhu-yao-yu-fa-shu-xing-yu-bian-liang.html</url>
      
        <content type="html"><![CDATA[<p>点击阅读前文前, 首页能看到的文章的简短描述</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h1 id="属性与变量"><a href="#属性与变量" class="headerlink" title="属性与变量"></a>属性与变量</h1><h2 id="属性与变量的区别"><a href="#属性与变量的区别" class="headerlink" title="属性与变量的区别"></a>属性与变量的区别</h2><p>属性是作用域为目标(<code>target</code>)的变量，但是也有全局属性。全局属性是一个没有缓存的全局变量。</p><h2 id="属性语法"><a href="#属性语法" class="headerlink" title="属性语法"></a>属性语法</h2><h3 id="set-property"><a href="#set-property" class="headerlink" title="set_property"></a><code>set_property</code></h3><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">set_property</span><span class="token punctuation">(</span>&lt;GLOBAL|DIRECTORY [&lt;dir<span class="token punctuation">&gt;</span>]|TARGET [&lt;target<span class="token punctuation">&gt;</span> ...] |SOURCE [&lt;src1<span class="token punctuation">&gt;</span> ...][DIRECTORY &lt;dirs<span class="token punctuation">&gt;</span> ...] |[TARGET_DIRECTORY &lt;targets<span class="token punctuation">&gt;</span> ...] |INSTALL [&lt;file<span class="token punctuation">&gt;</span> ...] |TEST [&lt;test<span class="token punctuation">&gt;</span> ...] |<span class="token variable">CACHE</span> [&lt;entry<span class="token punctuation">&gt;</span> ...] <span class="token punctuation">&gt;</span>[APPEND] [APPEND_STRING]PROPERTY &lt;name<span class="token punctuation">&gt;</span> [&lt;value<span class="token punctuation">&gt;</span> ...]<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="get-property"><a href="#get-property" class="headerlink" title="get_property"></a><code>get_property</code></h3><h3 id="define-property"><a href="#define-property" class="headerlink" title="define_property"></a><code>define_property</code></h3><h2 id="属性分类"><a href="#属性分类" class="headerlink" title="属性分类"></a>属性分类</h2><h2 id="打印属性"><a href="#打印属性" class="headerlink" title="打印属性"></a>打印属性</h2><h2 id="cmake预置属性"><a href="#cmake预置属性" class="headerlink" title="cmake预置属性"></a>cmake预置属性</h2>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cmake系统学习:2.2 cmake主要语法 变量与缓存</title>
      <link href="//post/cmake-xi-tong-xue-xi-2-2-cmake-zhu-yao-yu-fa-bian-liang-yu-huan-cun.html"/>
      <url>//post/cmake-xi-tong-xue-xi-2-2-cmake-zhu-yao-yu-fa-bian-liang-yu-huan-cun.html</url>
      
        <content type="html"><![CDATA[<p>点击阅读前文前, 首页能看到的文章的简短描述</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h1 id="变量与缓存"><a href="#变量与缓存" class="headerlink" title="变量与缓存"></a>变量与缓存</h1><h2 id="缓存变量"><a href="#缓存变量" class="headerlink" title="缓存变量"></a>缓存变量</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>写到缓存文件里了</p><p>只要缓存文件里有了就跳过，想要修改需要加<code>FORCE</code></p><p><code>set(&lt;variable&gt; &lt;value&gt;... CACHE &lt;type&gt; &lt;docstring&gt; [FORCE])</code></p><p><code>type</code>:</p><p><code>BOOL</code>  <code>ON</code>/<code>OFF</code>选择框</p><p><code>FILEPATH</code> 文件选择</p><p><code>PATH</code> 目录选择</p><p><code>STRING</code> 字符串</p><p><code>INTERNAL</code> 内部变量，内部的全局缓存变量，不会开放给用户使用</p><p><code>FORCE</code>强制修改，不加的话第一次设置后，第二次设置不会设置</p><h3 id="缓存变量作用域"><a href="#缓存变量作用域" class="headerlink" title="缓存变量作用域"></a>缓存变量作用域</h3><p>普通变量的作用域是自身和子模块(<code>add_subdirectory</code>或<code>include</code>)</p><p>缓存变量的作用域是全局的</p><h2 id="ccmake"><a href="#ccmake" class="headerlink" title="ccmake"></a>ccmake</h2><p><code>ccmake</code>是在<code>cmake</code>生成之后，对<code>cmake</code>的<code>cache</code>进行修改，重新生成<code>makefile</code>文件。所以需要先执行<code>cmake</code>。</p><h2 id="CACHE覆盖策略设置"><a href="#CACHE覆盖策略设置" class="headerlink" title="CACHE覆盖策略设置"></a>CACHE覆盖策略设置</h2><p>缓存变量和普通变量重名时覆盖策略</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">cmake_policy</span><span class="token punctuation">(</span>SET CMP0126 &lt;NEW|OLD<span class="token punctuation">&gt;</span><span class="token punctuation">)</span><span class="token comment"># NEW 不删除重名普通变量</span><span class="token comment"># OLD 删去重名的普通变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>访问cahce变量</p><p><code>${NVAR}</code> 先找普通变量，再找cache变量。重名时默认是会删掉普通变量</p><p><code>$CACHE{NVAR}</code>直接找cache变量</p><h2 id="CMake内置缓存变量"><a href="#CMake内置缓存变量" class="headerlink" title="CMake内置缓存变量"></a>CMake内置缓存变量</h2><h2 id="D传递缓存变量"><a href="#D传递缓存变量" class="headerlink" title="-D传递缓存变量"></a>-D传递缓存变量</h2><p>在cmake生成前传递的变量都是缓存变量</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> make </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cmake系统学习:2.1 cmake主要语法</title>
      <link href="//post/cmake-xi-tong-xue-xi-2-1-cmake-zhu-yao-yu-fa.html"/>
      <url>//post/cmake-xi-tong-xue-xi-2-1-cmake-zhu-yao-yu-fa.html</url>
      
        <content type="html"><![CDATA[<h2 id="if流程控制"><a href="#if流程控制" class="headerlink" title="if流程控制"></a>if流程控制</h2><span id="more"></span><!-- markdownlint-disable MD041 MD002--><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="if-真假值"><a href="#if-真假值" class="headerlink" title="if 真假值"></a>if 真假值</h2><p><code>if(&lt;constant&gt;)</code></p><p>0,<code>OFF</code>,<code>NO</code>,<code>FALSE</code>,<code>N</code>,<code>IGNORE</code>,<code>NOTFOUND</code>,空字符串,以<code>-NOTFOUND</code>结尾的字符串则为假</p><p>未定义变量为空字符串</p><p>环境变量总为假</p><p><code>if(&lt;variable&gt;)</code></p><p>环境变量总为假（if不支持的都是假的）</p><p>宏参数不是变量，宏是个替换</p><p><code>if(&lt;string&gt;)</code></p><p>字符串的值是常量真则为真，例如<code>"YES"</code></p><p>其他带引号的字符串都是假</p><h2 id="If逻辑操作符"><a href="#If逻辑操作符" class="headerlink" title="If逻辑操作符"></a>If逻辑操作符</h2><p><code>NOT AND OR</code> + <code>()</code></p><h2 id="if判断语句"><a href="#if判断语句" class="headerlink" title="if判断语句"></a>if判断语句</h2><h3 id="一元判断"><a href="#一元判断" class="headerlink" title="一元判断"></a>一元判断</h3><p><code>EXISTS</code> 判断是否存在</p><p><code>COMMAND</code> 判断后面是不是cmake命令</p><p> <code>DEFINED</code> 变量是否定义</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">DEFINED</span> &lt;name<span class="token punctuation">&gt;</span>|<span class="token variable">CACHE</span>{&lt;<span class="token property">NAME</span><span class="token punctuation">&gt;</span><span class="token punctuation">}</span>|<span class="token variable">ENV</span>{&lt;name<span class="token punctuation">&gt;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>判断是否定义了给定的变量/缓存变量/环境变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="二元判断"><a href="#二元判断" class="headerlink" title="二元判断"></a>二元判断</h3><p><code>EQUAL</code>,<code>LESS</code>,<code>LESS_EQUAL</code>,<code>GREATER</code>,<code>GREATER_EQUAL</code>(只能判断数字)</p><p><code>STREQUAL</code>,<code>STRLESS</code>,STR<code>LESS_EQUAL</code>,STR<code>GREATER</code>,STR<code>GREATER_EQUAL</code>(也可以判断数字)</p><p><code>VERSION_EQUAL</code>,<code>VERSION_LESS</code>,<code>VERSION_LESS_EQUAL</code>,<code>VERSION_GREATER</code>,<code>VERSION_GREATER_EQUAL</code></p><p><code>IN_LIST</code></p><p> <code>if(&lt;variable|string&gt; IN_LIST &lt;variable&gt;)</code></p><p><code>MATCHES</code> 支持正则</p><p><code>if(&lt;variable|string&gt; MATCHES regex)</code></p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"abcd1234"</span> <span class="token operator">MATCHES</span> <span class="token string">"^[a-z]+$"</span><span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">"match"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">"not match"</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#[[</span>^意思是开头$意思是结尾+一到多个]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表达式语句"><a href="#表达式语句" class="headerlink" title="表达式语句"></a>表达式语句</h3>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cmake系统学习:2 常用功能</title>
      <link href="//post/cmake-xi-tong-xue-xi-2-chang-yong-gong-neng.html"/>
      <url>//post/cmake-xi-tong-xue-xi-2-chang-yong-gong-neng.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><!-- markdownlint-disable MD041 MD002--><h1 id="cmake常用功能"><a href="#cmake常用功能" class="headerlink" title="cmake常用功能"></a>cmake常用功能</h1><h2 id="自动导入源文件和头文件"><a href="#自动导入源文件和头文件" class="headerlink" title="自动导入源文件和头文件"></a>自动导入源文件和头文件</h2><ol><li><code>aux_source_directory</code></li></ol><p><code>aux_source_directory("./src" SRCS)</code></p><p>把<code>./src</code>路径下所有文件存入<code>SRCS</code>变量中</p><ol start="2"><li><code>file</code></li></ol><p><code>file(GLOB H_FILE "${INCLUDE_PATH}/xx/*.h*")</code></p><p><code>file(GLOB H_FILE_I "${INCLUDE_PATH}/*.h")</code></p><h2 id="cmake分步编译"><a href="#cmake分步编译" class="headerlink" title="cmake分步编译"></a>cmake分步编译</h2><ol><li><p>选择编译目标</p><p><code>cmake --build . --target help</code></p></li><li><p>预处理</p><p><code>cmake --build . --target xx.i</code></p></li><li><p>编译</p><p><code>cmake --build . --target xx.s</code></p></li><li><p>汇编</p><p><code>cmake --build . --target xx.o</code></p></li><li><p>链接</p></li><li><p>运行</p><p>动态库加载路径</p></li><li><p>清理</p><p><code>cmake --build . --target clean</code></p></li></ol><h2 id="打印具体指令"><a href="#打印具体指令" class="headerlink" title="打印具体指令"></a>打印具体指令</h2><p><code>CMAKE_VERBOSE_MAKEFILE</code></p><p><code>cmake --build . -v</code></p><p>显示详细的生成日志，默认是<code>OFF</code></p><p><code>set(CMAKE_VERBOSE_MAKEFILE ON)</code></p><p>或者</p><p><code>cmake --build . --verbose</code></p><h2 id="设置输出目录"><a href="#设置输出目录" class="headerlink" title="设置输出目录"></a>设置输出目录</h2><ul><li><p>库输出路径</p><p><code>CMAKE_LIBRARY_OUTPUT_DIRECTORY</code></p></li><li><p>归档输出路径</p><p><code>CMAKE_ARCHIVE_OUTPUT_DIRECTORY</code></p></li><li><p>执行程序输出路径</p><p><code>CMAKE_RUNTIME_OUTPUT_DIRECTORY</code> (bin)</p></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cmake系统学习:1 注释,message,set,include</title>
      <link href="//post/cmake-xi-tong-xue-xi-1-zhu-shi-yu-message-he-set.html"/>
      <url>//post/cmake-xi-tong-xue-xi-1-zhu-shi-yu-message-he-set.html</url>
      
        <content type="html"><![CDATA[<p>cmake基础</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h1 id="注释-message-set-include"><a href="#注释-message-set-include" class="headerlink" title="注释,message, set, include"></a>注释,message, set, include</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ol><li>行注释</li></ol><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># 注释</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>括号注释(3.0之后)</li></ol><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment">#[[第一行注释</span>第二行注释]]<span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">"arg1\n"</span> <span class="token comment">#[[注释内容]] "arg2")</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="message"><a href="#message" class="headerlink" title="message"></a>message</h2><h3 id="message日志级别"><a href="#message日志级别" class="headerlink" title="message日志级别"></a>message日志级别</h3><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">message</span><span class="token punctuation">(</span>arg1 arg2 arg3<span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span>[&lt;mode<span class="token punctuation">&gt;</span>] <span class="token string">"message text"</span> ...<span class="token punctuation">)</span><span class="token comment"># mode</span><span class="token comment">#[[</span>FATAL_ERROR 停止cmake运行和生成SEND_ERROR cmake继续运行，生成跳过WARNING 打印到stderr 会打印路径和行数<span class="token punctuation">(</span>none<span class="token punctuation">)</span> or NOTICE 打印到stderrSTATUS 项目用户可能感兴趣的信息，会加前缀--VERVOSE 针对项目用户的详细信息，会加前缀--，默认不显示DEBUG 开发人员使用的信息TRACE 非常低级实现细节的消息]]cmake -S . -B build --log-level=VERBOSE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="message-report-checks插座库日志"><a href="#message-report-checks插座库日志" class="headerlink" title="message report checks插座库日志"></a>message report checks插座库日志</h3><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">message</span><span class="token punctuation">(</span>&lt;checkState<span class="token punctuation">&gt;</span> <span class="token string">"msg"</span> ...<span class="token punctuation">)</span><span class="token comment"># 可以嵌套</span><span class="token comment"># checkState</span><span class="token comment">#[[</span>CHECK_STARTCHECK_PASSCHECK_FAIL]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">message</span><span class="token punctuation">(</span>CHECK_START <span class="token string">"find xxx"</span><span class="token punctuation">)</span><span class="token comment"># 增加缩进</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_MESSAGE_INDENT</span> <span class="token string">"--"</span><span class="token punctuation">)</span><span class="token comment"># 嵌套 1</span><span class="token keyword">message</span><span class="token punctuation">(</span>CHECK_START <span class="token string">"find yyy"</span><span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span>CHECK_PASS <span class="token string">"found"</span><span class="token punctuation">)</span><span class="token comment"># 嵌套 2</span><span class="token keyword">message</span><span class="token punctuation">(</span>CHECK_START <span class="token string">"find zzz"</span><span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span>CHECK_FAIL <span class="token string">"not found"</span><span class="token punctuation">)</span><span class="token comment"># 取消缩进</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_MESSAGE_INDENT</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span>CHECK_FAIL <span class="token string">"not found"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量未设置返回空字符串, <code>${name}</code></p><p>变量引用可以嵌套，并由内而外求值<code>${prefix${name}}</code></p><p>变量名大小写敏感</p><p><code>set</code>(), <code>unset()</code></p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">set</span><span class="token punctuation">(</span>VAR1 <span class="token string">"VAR1_value"</span><span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">"\<span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">VAR1</span><span class="token punctuation">}</span></span>=<span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">VAR1</span><span class="token punctuation">}</span></span>"</span><span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">"\<span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">VAR1</span><span class="token punctuation">}</span></span>=<span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">VAR1</span><span class="token punctuation">}</span></span>"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="cmake内建变量"><a href="#cmake内建变量" class="headerlink" title="cmake内建变量"></a>cmake内建变量</h3><h4 id="提供信息的变量"><a href="#提供信息的变量" class="headerlink" title="提供信息的变量"></a>提供信息的变量</h4><ol><li><code>PROJECT_NAME</code> 项目名</li></ol><h4 id="改变行为的变量"><a href="#改变行为的变量" class="headerlink" title="改变行为的变量"></a>改变行为的变量</h4><ol><li><code>BUILD_SHARED_LIBS</code></li></ol><h4 id="描述系统的变量"><a href="#描述系统的变量" class="headerlink" title="描述系统的变量"></a>描述系统的变量</h4><h4 id="控制构建过程的变量"><a href="#控制构建过程的变量" class="headerlink" title="控制构建过程的变量"></a>控制构建过程的变量</h4><p><code>CMAKE_COLOR_MAKEFILE</code>,默认<code>ON</code></p><h3 id="cmake传递变量给C"><a href="#cmake传递变量给C" class="headerlink" title="cmake传递变量给C++"></a>cmake传递变量给C++</h3><ol><li><p>CLI</p><p><code>cmake .. -Dxx=yy -Dzz</code></p></li><li><p>cmake</p><p><code>add_definitions(-Dxx=yy -Dzz)</code></p><p>zz默认值为1</p></li></ol><h2 id="include-make模块"><a href="#include-make模块" class="headerlink" title="include make模块"></a>include make模块</h2><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string">"cmake/test.cmake"</span><span class="token punctuation">)</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string">"cmake/xx.cmake"</span> OPTIONAL<span class="token punctuation">)</span> <span class="token comment"># 可选，文件不存在不报错</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string">"cmake/xx.cmake"</span> OPTIONAL RESULT_VARIABLE ret<span class="token punctuation">)</span> <span class="token comment"># 获得是否找到的返回值</span><span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">"RESULT_VARIABLE ret = <span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">ret</span><span class="token punctuation">}</span></span>"</span><span class="token punctuation">)</span> <span class="token comment"># ret = NOFOUND</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string">"cmake/test.cmake"</span> OPTIONAL RESULT_VARIABLE ret<span class="token punctuation">)</span> <span class="token comment"># 获得是否找到的返回值</span><span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">"RESULT_VARIABLE ret = <span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">ret</span><span class="token punctuation">}</span></span>"</span><span class="token punctuation">)</span> <span class="token comment">#ret = 导入的cmake文件路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音视频很好的链接</title>
      <link href="//post/yin-shi-pin-hen-hao-de-lian-jie.html"/>
      <url>//post/yin-shi-pin-hen-hao-de-lian-jie.html</url>
      
        <content type="html"><![CDATA[<p>点击阅读前文前, 首页能看到的文章的简短描述</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><p><a href="http://jhuster.com/">http://jhuster.com</a> 卢俊</p><p><a href="https://blog.51cto.com/ticktick/1956269">https://blog.51cto.com/ticktick/1956269</a> 音视频入坑指南</p><p><a href="https://zhuanlan.zhihu.com/p/51371354">https://zhuanlan.zhihu.com/p/51371354</a> 播放器架构</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git rebase使用</title>
      <link href="//post/git-rebase-shi-yong.html"/>
      <url>//post/git-rebase-shi-yong.html</url>
      
        <content type="html"><![CDATA[<p><code>git rebase</code>法则：永远不要在公共分支上使用它。</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h2 id="合并主干提交到feature"><a href="#合并主干提交到feature" class="headerlink" title="合并主干提交到feature"></a>合并主干提交到feature</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout feature<span class="token function">git</span> merge master<span class="token comment"># git merge feature master</span><span class="token comment"># 这样会在feature创建一个merge commit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/02.svg" alt="将master合并到功能分支中"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout feature<span class="token function">git</span> rebase master<span class="token comment"># git rebase -i master</span><span class="token comment"># 与merge提交不同，rebase通过为原始分支中每个提交创建全新的commits来重写项目历史记录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/03.svg" alt="将功能分支重新映射到主服务器上"></p><p>要使用交互式 rebase，需要使用 <code>git rebase</code> 和 <code>-i</code> 选项：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">git checkout featuregit rebase -i master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这将打开一个文本编辑器，列出即将移动的所有提交：</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake">pick 33d5b7a Message for commit <span class="token comment">#1</span>pick 9480b3d Message for commit <span class="token comment">#2</span>pick 5c67e61 Message for commit <span class="token comment">#3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此列表准确定义了执行 rebase 后分支的外观。通过更改 <code>pick</code> 命令或重新排序条目，你可以使分支的历史记录看起来像你想要的任何内容。例如，如果第二次提交 fix 了第一次提交中的一个小问题，您可以使用以下 <code>fixup</code> 命令将它们浓缩为一个提交：</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake">pick 33d5b7a Message for commit <span class="token comment">#1</span>fixup 9480b3d Message for commit <span class="token comment">#2</span>pick 5c67e61 Message for commit <span class="token comment">#3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/04.svg" alt="使用交互式rebase来压缩提交"></p><h2 id="本地清理"><a href="#本地清理" class="headerlink" title="本地清理"></a>本地清理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout feature<span class="token function">git</span> rebase <span class="token parameter variable">-i</span> HEAD~3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/07.svg" alt="重新上头~3"></p><p>如果要使用此方法重写整个功能，<code>git merge-base</code> 命令可用于查找 <code>feature</code> 分支的原始 base。以下内容返回原始 base 的提交ID，然后你可以将其传递给 <code>git rebase</code>：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">git merge<span class="token operator">-</span><span class="token keyword">base</span> feature master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git commit规范</title>
      <link href="//post/git-commit-gui-fan.html"/>
      <url>//post/git-commit-gui-fan.html</url>
      
        <content type="html"><![CDATA[<p>点击阅读前文前, 首页能看到的文章的简短描述</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><p><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html">http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html</a></p><p>Commit message 都包括三个部分：Header，Body 和 Footer。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>type<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>scope<span class="token operator">&gt;</span><span class="token punctuation">)</span>: <span class="token operator">&lt;</span>subject<span class="token operator">&gt;</span>// 空一行<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>// 空一行<span class="token operator">&lt;</span>footer<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>Header部分只有一行，包括三个字段：<code>type</code>（必需）、<code>scope</code>（可选）和<code>subject</code>（必需）。</p><p><strong>（1）type</strong></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>feat：新功能（feature）<br>fix：修补bug<br>docs：文档（documentation）<br>style： 格式（不影响代码运行的变动）<br>refactor：重构（即不是新增功能，也不是修改bug的代码变动）<br>test：增加测试<br>chore：构建过程或辅助工具的变动</p></blockquote><p><strong>（2）scope</strong></p><p><code>scope</code>用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p><p><strong>（3）subject</strong></p><p><code>subject</code>是 commit 目的的简短描述，不超过50个字符。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><ul><li>以动词开头，使用第一人称现在时，比如<code>change</code>，而不是<code>changed</code>或<code>changes</code></li><li>第一个字母小写</li><li>结尾不加句号（<code>.</code>）</li></ul></blockquote><h2 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">More detailed explanatory text, <span class="token keyword">if</span> necessary.  Wrap it to about <span class="token number">72</span> characters or so. Further paragraphs come after blank lines.- Bullet points are okay, too- Use a hanging indent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h2><ol><li><p>关闭Issue</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 关闭单个</span>Closes <span class="token comment">#234 </span><span class="token comment"># 关闭多个</span>Closes <span class="token comment">#123, #245, #992</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不兼容变动</p></li></ol><p>感觉基本不用，用到看原文</p><h2 id="Revert"><a href="#Revert" class="headerlink" title="Revert"></a>Revert</h2><p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以<code>revert:</code>开头，后面跟着被撤销 Commit 的 Header。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">revert: feat<span class="token punctuation">(</span>pencil<span class="token punctuation">)</span>: <span class="token function">add</span> <span class="token string">'graphiteWidth'</span> optionThis reverts commit 667ecc1654a317a13331b17617d973392f415f02.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Body部分的格式是固定的，必须写成<code>This reverts commit &lt;hash&gt;.</code>，其中的<code>hash</code>是被撤销 commit 的 SHA 标识符。</p><p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的<code>Reverts</code>小标题下面。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="Commitizen"><a href="#Commitizen" class="headerlink" title="Commitizen"></a>Commitizen</h3><p><a href="https://github.com/commitizen/cz-cli">Commitizen</a>是一个撰写合格 Commit message 的工具。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装时遇到报错可以换淘宝源</span><span class="token comment"># npm config set registry https://registry.npm.taobao.org</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> commitizen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在项目路径下运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">commitizen init cz-conventional-changelog <span class="token parameter variable">--save</span> --save-exact<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以后，凡是用到<code>git commit</code>命令，一律改为使用<code>git cz</code>。</p><p>如果要编写多行，使用<code>\n</code> 换行。回车直接结束描述</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221103214049773.png" alt="image-20221103214049773"></p><h3 id="standard-changelog"><a href="#standard-changelog" class="headerlink" title="standard-changelog"></a>standard-changelog</h3><p>根据commit生成changelog</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> standard-changelog<span class="token builtin class-name">cd</span> project_dirstandard-changelog<span class="token comment"># npm install -g conventional-changelog</span><span class="token comment"># cd my-project</span><span class="token comment"># conventional-changelog -p angular -i CHANGELOG.md -w</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221103215039647.png" alt="image-20221103215039647"></p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221103215056593.png" alt="image-20221103215056593"></p><h2 id="修改git-commit信息"><a href="#修改git-commit信息" class="headerlink" title="修改git commit信息"></a>修改git commit信息</h2><p>1、将当前分支无关的工作状态进行暂存</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、将 <code>HEAD</code> 移动到需要修改的 <code>commit</code> 上</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rebase 9633cf0919^ <span class="token parameter variable">--interactive</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、找到需要修改的 <code>commit</code> ,将首行的 <code>pick</code> 改成 <code>edit</code><br>4、开始着手解决你的 <code>bug</code><br>5、 <code>git add</code> 将改动文件添加到暂存<br>6、 <code>git commit –amend</code> 追加改动到提交<br>7、<code>git rebase –continue</code> 移动 <code>HEAD</code> 回最新的 <code>commit</code><br>8、恢复之前的工作状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash pop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git worktree使用</title>
      <link href="//post/git-worktree-shi-yong.html"/>
      <url>//post/git-worktree-shi-yong.html</url>
      
        <content type="html"><![CDATA[<p>使用<code>git worktree</code>同时在多个 branch 上工作。</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><p>参考<a href="https://blog.didispace.com/categories/Git/">一些文章</a></p><p><img src="https://pic1.zhimg.com/80/v2-1688c37a2c59e782b3d7e6b4f75ad7f4_1440w.webp" alt="img"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> worktree <span class="token function">add</span> <span class="token punctuation">[</span>-f<span class="token punctuation">]</span> <span class="token punctuation">[</span>--detach<span class="token punctuation">]</span> <span class="token punctuation">[</span>--checkout<span class="token punctuation">]</span> <span class="token punctuation">[</span>--lock <span class="token punctuation">[</span>--reason <span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-b <span class="token operator">&lt;</span>new-branch<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>path<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>commit-ish<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token function">git</span> worktree list <span class="token punctuation">[</span>-v <span class="token operator">|</span> <span class="token parameter variable">--porcelain</span> <span class="token punctuation">[</span>-z<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token function">git</span> worktree lock <span class="token punctuation">[</span>--reason <span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>worktree<span class="token operator">&gt;</span><span class="token function">git</span> worktree move <span class="token operator">&lt;</span>worktree<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>new-path<span class="token operator">&gt;</span><span class="token function">git</span> worktree prune <span class="token punctuation">[</span>-n<span class="token punctuation">]</span> <span class="token punctuation">[</span>-v<span class="token punctuation">]</span> <span class="token punctuation">[</span>--expire <span class="token operator">&lt;</span>expire<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token function">git</span> worktree remove <span class="token punctuation">[</span>-f<span class="token punctuation">]</span> <span class="token operator">&lt;</span>worktree<span class="token operator">&gt;</span><span class="token function">git</span> worktree repair <span class="token punctuation">[</span><span class="token operator">&lt;</span>path<span class="token operator">&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token function">git</span> worktree unlock <span class="token operator">&lt;</span>worktree<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用git worktree可以仅需维护一个 repo，又可以同时在多个 branch 上工作，互不影响。免去分支切换的苦恼。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> <span class="token function">git</span> worktree <span class="token function">add</span> <span class="token parameter variable">-b</span> <span class="token string">"feature/feature1"</span> <span class="token punctuation">..</span>/feature/feature1 <span class="token comment"># 查看链接工作区下.git</span> <span class="token function">cat</span> .git<span class="token comment"># gitdir: /Users/dongyilong/test/git_test/demo-project/.git/worktrees/feature1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221103204829664.png" alt="image-20221103204829664"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> worktree list <span class="token parameter variable">--porcelain</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221103204931170.png" alt="image-20221103204931170"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> worktree move <span class="token string">"feature/feature1"</span> <span class="token punctuation">..</span>/feature/feature2<span class="token comment"># 不能移动主工作树或者包含子模块的工作树</span><span class="token comment"># 工作树的名字为demo-project， feature/feature2</span><span class="token comment"># git worktree list --porcelain</span>worktree /Users/dongyilong/test/git_test/demo-projectHEAD e1da10447082e472ad8a2b57808d4ef9cec87823branch refs/heads/masterworktree /Users/dongyilong/test/git_test/feature/feature2HEAD e1da10447082e472ad8a2b57808d4ef9cec87823branch refs/heads/feature/feature1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221103205326277.png" alt="image-20221103205326277"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> worktree remove feature/feature2<span class="token function">git</span> worktree remove <span class="token parameter variable">-f</span> feature/feature2<span class="token function">git</span> worktree prune <span class="token comment"># 清除$GIT_DIR/worktrees中的工作树信息。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>clang 编译链接</title>
      <link href="//post/clang-bian-yi-lian-jie.html"/>
      <url>//post/clang-bian-yi-lian-jie.html</url>
      
        <content type="html"><![CDATA[<p>clang编译与搜索路径</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><p>如果在mac上自己编译了clang,llvm然后安装了，可能会出现找不到文件的错误。</p><p>可以在<code>~/.zshrc</code>中加入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> clang+<span class="token operator">+=</span><span class="token string">'clang++ -isysroot `xcrun --show-sdk-path` '</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">clang</span><span class="token operator">=</span><span class="token string">'clang -isysroot `xcrun --show-sdk-path` '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xx.c <span class="token comment"># 源文件</span>xx.i <span class="token comment"># 预处理后文件</span>xx.s <span class="token comment"># 汇编代码</span>xx.o <span class="token comment"># 目标文件，引用的其他文件的函数地址尚未定义</span>xx.out <span class="token comment"># 可执行文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译预处理</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clang <span class="token parameter variable">-E</span> xx.c <span class="token comment"># 进行预处理</span>cpp xx.c <span class="token comment"># 编译预处理命令程序是cpp，也可以直接使用cpp进行预处理</span>clang <span class="token parameter variable">-E</span> <span class="token parameter variable">-c</span> xx.i xx.c <span class="token comment"># 保存到文件</span>clang <span class="token parameter variable">-o</span> xx.i xx.c <span class="token comment"># 保存到文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>生成汇编</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clang <span class="token parameter variable">-S</span> xx.cclang <span class="token parameter variable">-S</span> <span class="token parameter variable">-o</span> xx.s xx.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成.o文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clang <span class="token parameter variable">-c</span> xx.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>保存中间步骤</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clang -save-temps xx.c<span class="token comment"># 会生成xx.i xx.s xx.o a.out</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="搜索路径设置"><a href="#搜索路径设置" class="headerlink" title="搜索路径设置"></a>搜索路径设置</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;xxx&gt;</span> <span class="token comment">// 只在默认的系统包含路径搜索头文件</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"xxx"</span> <span class="token comment">// 现在当前目录搜索头文件</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clang <span class="token parameter variable">-Ixxx</span> <span class="token comment"># 增加头文件搜索目录</span>clang <span class="token parameter variable">-include</span> /xxx/xx.h <span class="token comment"># 增加头文件</span>clang <span class="token parameter variable">-Lxxx</span> <span class="token comment"># 增加库搜索目录</span>clang <span class="token parameter variable">-lxx</span> <span class="token comment"># 增加库文件  libxx.后缀</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用编译选项"><a href="#常用编译选项" class="headerlink" title="常用编译选项"></a>常用编译选项</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-Wall</span> <span class="token builtin class-name">:</span> 显示所有常用的编译警告信息。<span class="token parameter variable">-W</span> <span class="token builtin class-name">:</span> 显示更多的常用编译警告，如：变量未使用、一些逻辑错误。<span class="token parameter variable">-Werror</span> <span class="token builtin class-name">:</span> 将警告升级为错误<span class="token parameter variable">-fPIC</span> <span class="token builtin class-name">:</span> 共享库应创建位置无关代码<span class="token parameter variable">-v</span> <span class="token builtin class-name">:</span> 打印编译一个文件的所有步骤<span class="token parameter variable">-D</span> <span class="token builtin class-name">:</span> -D<span class="token operator">&lt;</span>macroname<span class="token operator">&gt;=</span><span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> 定义宏<span class="token parameter variable">-U</span> <span class="token builtin class-name">:</span> undef@xx <span class="token builtin class-name">:</span> 从文件xx中读取参数<span class="token parameter variable">-std</span> <span class="token builtin class-name">:</span> <span class="token parameter variable">-std</span><span class="token operator">=</span>c++11/c++14/c++17/c90/c89/<span class="token parameter variable">-static</span> <span class="token parameter variable">-shared</span>-ccc-print-phases <span class="token builtin class-name">:</span> 打印编译阶段-L<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--prefix</span> gperftools<span class="token variable">)</span></span>/lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html">其他参数</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> clang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMake Cookbook 第二章: 检测环境</title>
      <link href="//post/cmake-cookbook-di-er-zhang-jian-ce-huan-jing.html"/>
      <url>//post/cmake-cookbook-di-er-zhang-jian-ce-huan-jing.html</url>
      
        <content type="html"><![CDATA[<h1 id="CMake-Cookbook-第二章-检测环境"><a href="#CMake-Cookbook-第二章-检测环境" class="headerlink" title="CMake Cookbook 第二章: 检测环境"></a>CMake Cookbook 第二章: 检测环境</h1><span id="more"></span><!-- markdownlint-disable MD041 MD002--><p>本文是对 <a href="https://github.com/xiaoweiChen/CMake-Cookbook/blob/master/SUMMARY.md">cmake cookbook中文翻译</a>的学习笔记记录，建议看原文。</p><h2 id="检测操作系统环境"><a href="#检测操作系统环境" class="headerlink" title="检测操作系统环境"></a>检测操作系统环境</h2><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">CMAKE_SYSTEM_NAME</span> <span class="token operator">STREQUAL</span> <span class="token string">"Linux"</span><span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"Configuring on/for Linux"</span><span class="token punctuation">)</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">CMAKE_SYSTEM_NAME</span> <span class="token operator">STREQUAL</span> <span class="token string">"Darwin"</span><span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"Configuring on/for macOS"</span><span class="token punctuation">)</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">CMAKE_SYSTEM_NAME</span> <span class="token operator">STREQUAL</span> <span class="token string">"Windows"</span><span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"Configuring on/for Windows"</span><span class="token punctuation">)</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">CMAKE_SYSTEM_NAME</span> <span class="token operator">STREQUAL</span> <span class="token string">"AIX"</span><span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"Configuring on/for IBM AIX"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"Configuring on/for <span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">CMAKE_SYSTEM_NAME</span><span class="token punctuation">}</span></span>"</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理平台和编译器相关代码"><a href="#处理平台和编译器相关代码" class="headerlink" title="处理平台和编译器相关代码"></a>处理平台和编译器相关代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>std<span class="token double-colon punctuation">::</span>string <span class="token function">say_hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">IS_WINDOWS</span></span>  <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Hello from Windows!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">IS_LINUX</span></span>  <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Hello from Linux!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">IS_MACOS</span></span>  <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Hello from macOS!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>  <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Hello from an unknown system!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">IS_INTEL_CXX_COMPILER</span></span>  <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Hello Intel compiler!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">IS_GNU_CXX_COMPILER</span></span>  <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Hello GNU compiler!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">IS_PGI_CXX_COMPILER</span></span>  <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Hello PGI compiler!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">IS_XL_CXX_COMPILER</span></span>  <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Hello XL compiler!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>  <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Hello unknown compiler - have we met before?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">say_hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"compiler name is "</span> COMPILER_NAME <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.5</span> FATAL_ERROR<span class="token punctuation">)</span><span class="token keyword">project</span><span class="token punctuation">(</span>recipe-<span class="token number">02</span> LANGUAGES CXX<span class="token punctuation">)</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span>hello-world hello-world.cpp<span class="token punctuation">)</span><span class="token comment"># 处理平台相关代码</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">CMAKE_SYSTEM_NAME</span> <span class="token operator">STREQUAL</span> <span class="token string">"Linux"</span><span class="token punctuation">)</span>  <span class="token keyword">target_compile_definitions</span><span class="token punctuation">(</span>hello-world <span class="token namespace">PUBLIC</span> <span class="token string">"IS_LINUX"</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">CMAKE_SYSTEM_NAME</span> <span class="token operator">STREQUAL</span> <span class="token string">"Darwin"</span><span class="token punctuation">)</span>  <span class="token keyword">target_compile_definitions</span><span class="token punctuation">(</span>hello-world <span class="token namespace">PUBLIC</span> <span class="token string">"IS_MACOS"</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">CMAKE_SYSTEM_NAME</span> <span class="token operator">STREQUAL</span> <span class="token string">"Windows"</span><span class="token punctuation">)</span>  <span class="token keyword">target_compile_definitions</span><span class="token punctuation">(</span>hello-world <span class="token namespace">PUBLIC</span> <span class="token string">"IS_WINDOWS"</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 处理编译器相关代码</span><span class="token keyword">target_compile_definitions</span><span class="token punctuation">(</span>hello-world <span class="token namespace">PUBLIC</span> <span class="token string">"COMPILER_NAME=\"<span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">CMAKE_CXX_COMPILER_ID</span><span class="token punctuation">}</span></span>\""</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_COMPILER_ID</span> <span class="token operator">MATCHES</span> Intel<span class="token punctuation">)</span>  <span class="token keyword">target_compile_definitions</span><span class="token punctuation">(</span>hello-world <span class="token namespace">PUBLIC</span> <span class="token string">"IS_INTEL_CXX_COMPILER"</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_COMPILER_ID</span> <span class="token operator">MATCHES</span> GNU<span class="token punctuation">)</span>  <span class="token keyword">target_compile_definitions</span><span class="token punctuation">(</span>hello-world <span class="token namespace">PUBLIC</span> <span class="token string">"IS_GNU_CXX_COMPILER"</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_COMPILER_ID</span> <span class="token operator">MATCHES</span> PGI<span class="token punctuation">)</span>  <span class="token keyword">target_compile_definitions</span><span class="token punctuation">(</span>hello-world <span class="token namespace">PUBLIC</span> <span class="token string">"IS_PGI_CXX_COMPILER"</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_COMPILER_ID</span> <span class="token operator">MATCHES</span> XL<span class="token punctuation">)</span>  <span class="token keyword">target_compile_definitions</span><span class="token punctuation">(</span>hello-world <span class="token namespace">PUBLIC</span> <span class="token string">"IS_XL_CXX_COMPILER"</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="检测处理器体系结构与指令集"><a href="#检测处理器体系结构与指令集" class="headerlink" title="检测处理器体系结构与指令集"></a>检测处理器体系结构与指令集</h2><p>暂时用不到</p><p><a href="https://github.com/xiaoweiChen/CMake-Cookbook/blob/master/content/chapter2/2.4-chinese.md">需要可以点击查看</a></p><h2 id="为Eigen库使能向量化"><a href="#为Eigen库使能向量化" class="headerlink" title="为Eigen库使能向量化"></a>为Eigen库使能向量化</h2><p>暂时用不到</p><p><a href="https://github.com/xiaoweiChen/CMake-Cookbook/blob/master/content/chapter2/2.6-chinese.md">需要可以点击查看</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CMake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMake Cookbook 第一章：从可执行文件到库</title>
      <link href="//post/cmake-cookbook-di-yi-zhang-cong-ke-zhi-xing-wen-jian-dao-ku.html"/>
      <url>//post/cmake-cookbook-di-yi-zhang-cong-ke-zhi-xing-wen-jian-dao-ku.html</url>
      
        <content type="html"><![CDATA[<p>CMake Cookbook 第一章：从可执行文件到库</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><p>本文是对 <a href="https://github.com/xiaoweiChen/CMake-Cookbook/blob/master/SUMMARY.md">cmake cookbook中文翻译</a>的学习笔记记录，建议看原文。</p><p>CMake是一个构建系统生成器。将描述构建系统(如：Unix Makefile、Ninja、Visual Studio等)应当如何操作才能编译代码。</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.5</span> FATAL_ERROR<span class="token punctuation">)</span><span class="token keyword">project</span><span class="token punctuation">(</span>recipe-<span class="token number">01</span> LANGUAGES C CXX<span class="token punctuation">)</span> <span class="token comment"># 可以设置语言</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="切换生成器"><a href="#切换生成器" class="headerlink" title="切换生成器"></a>切换生成器</h2><p>CMake语言不区分大小写，但是参数区分</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> build<span class="token builtin class-name">cd</span> buildcmake <span class="token parameter variable">-G</span> Ninja <span class="token punctuation">..</span> <span class="token comment"># -G切换生成器</span><span class="token comment"># cmake -H. -Bbuild</span><span class="token comment"># -H.代表在当前目录搜索根CMakeLists.txtx文件，</span><span class="token comment"># -Bbuild表示在名为build的目录下生成所有文件</span>cmake <span class="token parameter variable">--build</span> <span class="token builtin class-name">.</span> <span class="token comment"># 编译</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="静态库与动态库"><a href="#静态库与动态库" class="headerlink" title="静态库与动态库"></a>静态库与动态库</h2><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">add_library</span><span class="token punctuation">(</span><span class="token punctuation">${</span>libname_static<span class="token punctuation">}</span> <span class="token namespace">STATIC</span> xxx.h xxx.cpp<span class="token punctuation">)</span><span class="token keyword">add_library</span><span class="token punctuation">(</span><span class="token punctuation">${</span>libname_shared<span class="token punctuation">}</span> <span class="token namespace">SHARED</span> xxx.h xxx.cpp<span class="token punctuation">)</span><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span><span class="token punctuation">${</span>exename<span class="token punctuation">}</span> <span class="token punctuation">${</span>libname_static<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span><span class="token punctuation">${</span>exename<span class="token punctuation">}</span> <span class="token punctuation">${</span>libname_shared<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://crascit.com/2016/01/31/enhanced-source-file-handling-with-target_sources/">target_sources介绍</a></p><p><code>target_include_directories</code></p><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">set</span><span class="token punctuation">(</span>USE_LIBRARY <span class="token boolean">OFF</span><span class="token punctuation">)</span> <span class="token comment"># 硬编码 </span><span class="token comment"># 1, ON, YES, true, Y,非0数，为true</span><span class="token comment"># 0, OFF, NO, false, N, IGNORE, NOTFOUND, 空字符串，为false</span><span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"Compile source into a library? <span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">USE_LIBRARY</span><span class="token punctuation">}</span></span>"</span><span class="token punctuation">)</span><span class="token keyword">list</span><span class="token punctuation">(</span>APPEND _sources Message.hpp Message.cpp<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>USE_LIBRARY<span class="token punctuation">)</span><span class="token keyword">add_library</span><span class="token punctuation">(</span>message <span class="token punctuation">${</span>_sources<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span>hello-world hello-world.cpp<span class="token punctuation">)</span><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>hello-world message<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">(</span>USE_LIBRARY<span class="token punctuation">)</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span>hello-world hello-world.cpp <span class="token punctuation">${</span>_sources<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span>USE_LIBRARY<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>局部变量可以在名称前加下划线</p><h2 id="cmake-选项-option"><a href="#cmake-选项-option" class="headerlink" title="cmake 选项 option"></a>cmake 选项 option</h2><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">include</span><span class="token punctuation">(</span>CMakeDependentOption<span class="token punctuation">)</span><span class="token comment"># cmake可以通过包含模块扩展语法和功能</span><span class="token comment"># cmake --help-module CMakeDependentOption 可以查看手册</span><span class="token keyword">option</span><span class="token punctuation">(</span>USE_LIBRARY <span class="token string">"Compile source into a library"</span> <span class="token boolean">OFF</span><span class="token punctuation">)</span><span class="token comment"># 使用方式 option(变量名 帮助字符串 默认值)</span><span class="token comment"># cmake -H. -Bbuild -D USE_LIBRARY=ON 可以开启选项</span><span class="token comment"># 有依赖关系到选项</span><span class="token function">cmake_dependent_option</span><span class="token punctuation">(</span>MAKE_STATIC_LIBRARY <span class="token string">"Compile sources into a static library"</span> <span class="token boolean">OFF</span><span class="token string">"USE_LIBRARY"</span> <span class="token boolean">ON</span><span class="token punctuation">)</span><span class="token function">cmake_dependent_option</span><span class="token punctuation">(</span>MAKE_SHARED_LIBRARY <span class="token string">"Compile sources into a shared library"</span> <span class="token boolean">ON</span><span class="token string">"USE_LIBRARY"</span> <span class="token boolean">ON</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="指定编译器"><a href="#指定编译器" class="headerlink" title="指定编译器"></a>指定编译器</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cmake -H. <span class="token parameter variable">-Bbuild</span> <span class="token parameter variable">-D</span> <span class="token assign-left variable">CMAKE_CXX_COMPILER</span><span class="token operator">=</span>clang++<span class="token comment"># 指定编译器</span>cmake --system-information information.txt<span class="token comment"># 可用的编译器和编译器标志</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="切换构建类型"><a href="#切换构建类型" class="headerlink" title="切换构建类型"></a>切换构建类型</h2><p>CMake可以配置构建类型，例如：Debug、Release等。配置时，可以为Debug或Release构建设置相关的选项或属性，例如：编译器和链接器标志。控制生成构建系统使用的配置变量是<code>CMAKE_BUILD_TYPE</code>。该变量默认为空，可选值如下：</p><p>Debug, Release<br>RelWithDebInfo：用于构建较少的优化库或可执行文件，包含调试符号。<br>MinSizeRel：用于不增加目标代码大小的优化方式来构建库或可执行文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cmake -H. <span class="token parameter variable">-Bbuild</span> <span class="token parameter variable">-D</span> <span class="token assign-left variable">CMAKE_BUILD_TYPE</span><span class="token operator">=</span>Debug<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">NOT</span> <span class="token variable">CMAKE_BUILD_TYPE</span><span class="token punctuation">)</span> <span class="token comment"># 便于命令行覆盖</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_BUILD_TYPE</span> Release <span class="token variable">CACHE</span> STRING <span class="token string">"Build type"</span> FORCE<span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"Build type: <span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">CMAKE_BUILD_TYPE</span><span class="token punctuation">}</span></span>"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>为Release版和Debug版单独创建构建目录会比较方便。</p><h2 id="设置编译选项"><a href="#设置编译选项" class="headerlink" title="设置编译选项"></a>设置编译选项</h2><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">list</span><span class="token punctuation">(</span>APPEND flags <span class="token string">"-fPIC"</span> <span class="token string">"-Wall"</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">NOT</span> <span class="token variable">WIN32</span><span class="token punctuation">)</span>  <span class="token keyword">list</span><span class="token punctuation">(</span>APPEND flags <span class="token string">"-Wextra"</span> <span class="token string">"-Wpedantic"</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">target_compile_options</span><span class="token punctuation">(</span>testlib  <span class="token namespace">PRIVATE</span>    <span class="token punctuation">${</span>flags<span class="token punctuation">}</span>  <span class="token punctuation">)</span><span class="token comment"># PRIVATE，编译选项会应用于给定的目标，不会传递给与目标相关的目标</span><span class="token comment"># INTERFACE，给定的编译选项将只应用于指定目标，并传递给与目标相关的目标。</span><span class="token comment"># PUBLIC，编译选项将应用于指定目标和使用它的目标。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cmake <span class="token parameter variable">--build</span> <span class="token builtin class-name">.</span> -- <span class="token assign-left variable">VERBOSE</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment"># 设置VERBOSE可以看到详细的编译参数和过程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">set</span><span class="token punctuation">(</span>COMPILER_FLAGS<span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">(</span>COMPILER_FLAGS_DEBUG<span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">(</span>COMPILER_FLAGS_RELEASE<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_COMPILER_ID</span> <span class="token operator">MATCHES</span> GNU<span class="token punctuation">)</span>  <span class="token keyword">list</span><span class="token punctuation">(</span>APPEND CXX_FLAGS <span class="token string">"-fno-rtti"</span> <span class="token string">"-fno-exceptions"</span><span class="token punctuation">)</span>  <span class="token keyword">list</span><span class="token punctuation">(</span>APPEND CXX_FLAGS_DEBUG <span class="token string">"-Wsuggest-final-types"</span> <span class="token string">"-Wsuggest-final-methods"</span> <span class="token string">"-Wsuggest-override"</span><span class="token punctuation">)</span>  <span class="token keyword">list</span><span class="token punctuation">(</span>APPEND CXX_FLAGS_RELEASE <span class="token string">"-O3"</span> <span class="token string">"-Wno-unused"</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_COMPILER_ID</span> <span class="token operator">MATCHES</span> Clang<span class="token punctuation">)</span>  <span class="token keyword">list</span><span class="token punctuation">(</span>APPEND CXX_FLAGS <span class="token string">"-fno-rtti"</span> <span class="token string">"-fno-exceptions"</span> <span class="token string">"-Qunused-arguments"</span> <span class="token string">"-fcolor-diagnostics"</span><span class="token punctuation">)</span>  <span class="token keyword">list</span><span class="token punctuation">(</span>APPEND CXX_FLAGS_DEBUG <span class="token string">"-Wdocumentation"</span><span class="token punctuation">)</span>  <span class="token keyword">list</span><span class="token punctuation">(</span>APPEND CXX_FLAGS_RELEASE <span class="token string">"-O3"</span> <span class="token string">"-Wno-unused"</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">target_compile_option</span><span class="token punctuation">(</span>compute-areas  <span class="token namespace">PRIVATE</span>    <span class="token punctuation">${</span>CXX_FLAGS<span class="token punctuation">}</span>    <span class="token string">"$&lt;$&lt;CONFIG:Debug&gt;:<span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">CXX_FLAGS_DEBUG</span><span class="token punctuation">}</span></span>&gt;"</span>    <span class="token string">"$&lt;$&lt;CONFIG:Release&gt;:<span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">CXX_FLAGS_RELEASE</span><span class="token punctuation">}</span></span>&gt;"</span>  <span class="token punctuation">)</span><span class="token comment"># 为不同配置使用不同flags</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置语言标准"><a href="#设置语言标准" class="headerlink" title="设置语言标准"></a>设置语言标准</h2><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">set_target_properties</span><span class="token punctuation">(</span>animal-farm  <span class="token namespace">PROPERTIES</span>    <span class="token property">CXX_STANDARD</span> <span class="token number">14</span>    <span class="token property">CXX_EXTENSIONS</span> <span class="token boolean">OFF</span> <span class="token comment"># 只启用ISO C++标准的编译器标志，而不使用特定编译器的扩展。</span>    <span class="token property">CXX_STANDARD_REQUIRED</span> <span class="token boolean">ON</span> <span class="token comment"># 如果这个版本不可用，CMake将停止配置并出现错误</span>  <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">list</span><span class="token punctuation">(</span>  APPEND sources_with_lower_optimization    geometry_circle.cpp    geometry_rhombus.cpp  <span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"Setting source properties using IN LISTS syntax:"</span><span class="token punctuation">)</span><span class="token keyword">foreach</span><span class="token punctuation">(</span>_source IN LISTS sources_with_lower_optimization<span class="token punctuation">)</span>  <span class="token keyword">set_source_files_properties</span><span class="token punctuation">(</span><span class="token punctuation">${</span>_source<span class="token punctuation">}</span> <span class="token namespace">PROPERTIES</span> <span class="token property">COMPILE_FLAGS</span> -O2<span class="token punctuation">)</span>  <span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"Appending -O2 flag for <span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">_source</span><span class="token punctuation">}</span></span>"</span><span class="token punctuation">)</span><span class="token keyword">endforeach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"Querying sources properties using plain syntax:"</span><span class="token punctuation">)</span><span class="token keyword">foreach</span><span class="token punctuation">(</span>_source <span class="token punctuation">${</span>sources_with_lower_optimization<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">get_source_file_property</span><span class="token punctuation">(</span>_flags <span class="token punctuation">${</span>_source<span class="token punctuation">}</span> <span class="token property">COMPILE_FLAGS</span><span class="token punctuation">)</span>  <span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"Source <span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">_source</span><span class="token punctuation">}</span></span> has the following extra COMPILE_FLAGS: <span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">_flags</span><span class="token punctuation">}</span></span>"</span><span class="token punctuation">)</span><span class="token keyword">endforeach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>set_source_files_properties(file PROPERTIES property value) </code>，它将属性设置为给定文件的传递值。</p><p><code>get_source_file_property(VAR file property)</code>，检索给定文件所需属性的值，并将其存储在CMake<code>VAR</code>变量中。</p><ol><li><p>人文/社会网络学分</p></li><li><p>人文素质活动，线上的文体活动/如何证明参加过迎新晚会等活动</p></li><li><p>其他毕业要求，例如体质等等</p></li><li><p>两次SRP创新分应该OK吧</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CMake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript学习 基础</title>
      <link href="//post/javascript-xue-xi-ji-chu.html"/>
      <url>//post/javascript-xue-xi-ji-chu.html</url>
      
        <content type="html"><![CDATA[<p>Javascript基础知识</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/A_first_splash">javascript mdn</a></p><p><a href="https://wangdoc.com/javascript/">JavaScript教程</a></p><p><a href="https://wangdoc.com/es6/intro">ECMAScript6学习</a></p><p><a href="https://wangdoc.com/">网道</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客</title>
      <link href="//post/da-jian-ge-ren-bo-ke.html"/>
      <url>//post/da-jian-ge-ren-bo-ke.html</url>
      
        <content type="html"><![CDATA[<p>博客制作教程：typora图床 + 域名与github部署 + 博客样式</p><span id="more"></span><h1 id="搭建个人博客"><a href="#搭建个人博客" class="headerlink" title="搭建个人博客"></a>搭建个人博客</h1><h2 id="写作工具"><a href="#写作工具" class="headerlink" title="写作工具"></a>写作工具</h2><p>阿里云 oss 对象存储 + PicGo + Typora =&gt; 自动上传图片的md编辑器</p><p>相信具体步骤很容易就能查到，我就不写了。</p><p><a href="https://zhuanlan.zhihu.com/p/344973958">https://zhuanlan.zhihu.com/p/344973958</a></p><h2 id="网站部署"><a href="#网站部署" class="headerlink" title="网站部署"></a>网站部署</h2><p>阿里云域名与解析 + Github Page + ssh =&gt; 网站部署方式</p><p>相信具体步骤很容易就能查到，我就只写几个注意点。</p><p><code>/blog/source</code>下新建文件<code>CNAME</code>，文件内容是自己的域名，例如<code>yilongdong.top</code></p><p>(域名解析A记录也能用，但是还是CNAME更好)</p><p>给github设置了ssh公钥后还需要获取token。第一次上传文件需要登陆，token就是密码。之后就免密了。</p><p>GitHub page开启https。</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221030235353714.png" alt="image-20221030235353714"></p><p><a href="https://blog.51cto.com/u_15064642/2572458">https://blog.51cto.com/u_15064642/2572458</a></p><h2 id="博客样式"><a href="#博客样式" class="headerlink" title="博客样式"></a>博客样式</h2><p>Hexo + 闪烁之狐主题 + 手动配置 =&gt; 网站样式</p><p>相信具体步骤很容易就能查到，我就不写了。</p><p><a href="http://blinkfox.com/">http://blinkfox.com</a></p><p>其他样式</p><p><a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><h2 id="博客订阅"><a href="#博客订阅" class="headerlink" title="博客订阅"></a>博客订阅</h2><p>开启RSS后，可以在Fluent阅读器下订阅</p><p>添加订阅源</p><p>xxx/atom.xml</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221030234415357.png" alt="image-20221030234415357"></p><p>开启提醒规则</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221030234516346.png" alt="image-20221030234516346"></p><p>设置抓取频率</p><p><img src="https://yilongdong-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221030234555569.png" alt="image-20221030234555569"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
